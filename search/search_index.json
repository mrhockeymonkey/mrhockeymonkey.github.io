{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My Personal KB","text":"<p>A collection of my own notes, snippets, examples, etc to refer back to. </p>"},{"location":"#course-list","title":"Course List","text":"<p>https://www.pluralsight.com/courses/advanced-defensive-programming-techniques https://www.pluralsight.com/courses/improving-testability-through-design https://www.pluralsight.com/courses/writing-highly-maintainable-unit-tests https://www.pluralsight.com/courses/c-sharp-code-more-object-oriented https://www.pluralsight.com/courses/making-functional-csharp https://www.pluralsight.com/courses/writing-purely-functional-code-csharp https://www.pluralsight.com/courses/outside-in-tdd https://www.pluralsight.com/courses/encapsulation-solid</p> <p>https://www.amazon.co.uk/Dependency-Injection-NET-Second-Seemann/dp/161729473X/ref=pd_lpo_1?pd_rd_i=161729473X&amp;psc=1</p>"},{"location":"#snip","title":"Snip","text":".browserslistrc<pre><code>--8&lt;--\u200b \"docs/foo.txt\"\n</code></pre>"},{"location":"TODO/","title":"TODO","text":"<pre><code>        public string Checksum()\n        {\n            using var md5 = MD5.Create();\n            var inputData = JsonSerializer.SerializeToUtf8Bytes(this);\n            var hash = md5.ComputeHash(inputData);\n            return BitConverter.ToString(hash).Replace(\"-\", \"\");\n        }\n</code></pre>"},{"location":"Angular/Calling%20APIs/","title":"Calling APIs","text":"<p>For newer versions of angular (version 4.3.x or above) http package is included under common <pre><code>// for app.module.ts\nimport { HttpClientModule } from '@angular/common/http'\n@NgModule({\n    import: [\n        BrowserModule\n        HttpClientModule // must be after browser module\n    ]\n})\n\n// for service.ts\nimport { HttpClient } from '@angular/common/http'\nconstructor(private httpClient: HttpClient) { }\n// Remove any map(res =&gt; res.json()) calls (which we'll add later in our code). They are no longer needed.\n</code></pre></p> <p>For older versions of Angular you need to install the <code>http</code> package <pre><code>//npm install --save @angular/http\nimport { HttpModule } from ''\n\n// for service.ts\nimport { Http } from '@angular/http'\n</code></pre></p>"},{"location":"Angular/Lazy%20Loading/","title":"Lazy Loading","text":"<pre><code>// app-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () =&gt; import('./tabs/tabs.module').then(m =&gt; m.TabsPageModule)\n  },\n  {\n    path: 'workout/:workoutId',\n    loadChildren: () =&gt; import('./workout-session/workout-session.module').then( m =&gt; m.WorkoutSessionPageModule)\n  }\n];\n@NgModule({\n  imports: [\n    // preloadingStrategy helps to stop Navigation latency due to having to load the module on demmand. \n    // PreloadAllModules loads all lazyloading routes in the background???\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n</code></pre> <pre><code>// workout-session-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { WorkoutSessionPage } from './workout-session.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WorkoutSessionPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class WorkoutSessionPageRoutingModule {}\n</code></pre>"},{"location":"Angular/cheatsheet/","title":"Cheatsheet","text":""},{"location":"Angular/routing/","title":"Routing","text":""},{"location":"Angular/routing/#basic-setup","title":"Basic Setup","text":"<pre><code>// app.module.ts\nimport { RouterModule } from '@angular/router';\n\nconst routes = [\n  { path: 'characters', component: TabsComponent, children: [\n    // default is pathMatch=prefix which would catch any path\n    // setting to full only matches when missing a side, \n    // which then redirects to side = all\n    { path: '', redirectTo: 'all', pathMatch: 'full' },\n    // path parameters \n    { path: ':side', component: ListComponent }\n  ] },\n  { path: 'new-character', component: CreateCharacterComponent },\n  // catch all and redirect\n  { path: '**', redirectTo: '/characters' }\n];\n\n@NgModule([\n    imports: [\n        RouterModule.forRoot(routes)\n    ]\n])\n</code></pre>"},{"location":"Angular/routing/#router-directives","title":"Router Directives","text":"<p>Use <code>routerLink</code> to enable navigation</p> <p>Use <code>routerLinkActive</code> to add a class when the applicable route is active, i.e. to highlight a button/tab</p> <p>Use <code>routeLinkActiveOptions</code> to only detect active is the path matches exactly. This can fix issues when child paths exist.</p> <pre><code>&lt;div&gt;\n  &lt;ul class=\"nav nav-tabs\"&gt;\n    &lt;li role=\"presentation\" \n        routerLinkActive=\"active\"&gt;\n        [routerLinkActiveOptions]=\"{exact: true}\"\n      &lt;a routerLink=\"/characters/all\"&gt;All&lt;/a&gt;\n      &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"Angular/routing/#reading-url-params","title":"Reading Url Params","text":"<p>Use <code>ActivatedRoute</code> to get information about the current route. </p> <pre><code>import { ActivatedRoute } from '@angular/router';\n\n@Component({})\nexport class ListComponent implements OnInit {\n    constructor(\n        activatedRoute: ActivatedRoute, \n        swService: StarWarsService) {\n    this.activatedRoute = activatedRoute;\n    this.swService = swService;\n  }\n\n  ngOnInit() {\n    // activatedRoute is an observable\n    this.activatedRoute.params.subscribe(\n      (params) =&gt; {\n        // everytime the url changes get/use the new params\n        // here side was specifiec in routes with path = ':side'\n        this.characters = this.swService.getCharacters(params.side)\n      }\n    );\n  }\n}\n</code></pre>"},{"location":"Angular/routing/#routing-module","title":"Routing Module","text":"<p>It is better practise to refactor routing into its own module</p> <pre><code>// app.module.ts\nimport { AppRoutingModule } from './app-routing.module';\n\n@NgModule({\n    imports: [AppRoutingModule]\n})\nexport class AppModule {}\n</code></pre> <pre><code>// app-routing.module.ts\nimport { RouterModule } from '@angular/router';\n\nconst routes = [{},{},{}]\n\n@NgModule({\n    imports: [RoutingModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n</code></pre> <p>The same can be done for child routing modules using the <code>forChild()</code> method in place of <code>forRoot()</code>.</p>"},{"location":"Angular/rxjs/","title":"Rxjs","text":""},{"location":"Angular/rxjs/#moving-from-5-to-6","title":"Moving from 5 to 6","text":"<pre><code>// 5\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/map';\n\nconst sub = interval()\n    .tap()\n    .map()\n    .subscribe()\n\n// 6\nimport { Observable, Observer, Subject, Subscription, interval } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nconst sub = interval()\n    .pipe(\n        tap(),\n        map(),\n        tap()\n    )\n    .subscribe()\n</code></pre>"},{"location":"Angular/rxjs/#basic-subscription","title":"Basic Subscription","text":"<pre><code>// my-service.ts\n\nimport { Subject } from 'rxjs/Subject'; // Subject is like a public event emitter\n\n@Injectible()\nexport class MyService {\n    somethingChanged = new Subject&lt;void&gt;();\n    somethingWithDefault = new BehaviourSubject('default value')\n\n    updateSomething(){\n        // change something and push event to subscribers\n        this.somethingChanged.next()\n    }\n}\n</code></pre> <pre><code>// my-component.ts\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\n@Component({})\nexport class MyComponent implements OnInit, OnDestroy {\n    myService: MyService\n    subscription: Subscription\n\n    constructor(myService: MyService){}\n\n    ngOnInit() {\n        this.subscription = this.myService.somethingChanged.subscribe(\n            () =&gt; {\n                // react to something changing\n            }\n        )\n    }\n\n    ngOnDestroy() {\n        // will pollute memory unless unsubscribed\n        this.subscription.unsubscribe();\n    }\n}\n</code></pre>"},{"location":"Angular/rxjs/#observer-next-error-complete","title":"Observer Next, Error, Complete","text":"<p>An Observer can handle multiple events</p> <pre><code>myObservable.subscribe(\n    (next) =&gt; {\n        // called when new value emitted\n    },\n    (error) =&gt; {\n        // handle error\n    },\n    () =&gt; {\n        // handle when observable finished\n    }\n)\n</code></pre> <p>this can also be written using an object <pre><code>oberver = {\n    next: () =&gt; {},\n    error: () =&gt; {},\n    complete: () =&gt; {}\n};\nmyObservable.subscribe(observer);\n</code></pre></p>"},{"location":"Angular/rxjs/#chaining-operators-funel-like","title":"Chaining Operators (Funel like)","text":"<p>You can chain operators inline to acheive more complicated logic</p> <pre><code>myObservable\n    .map(\n        () =&gt; {} // transform the data\n    )\n    .throttleTimeout(1000) // drop frequent events\n    .subscribe(\n        () = {} // process event\n    )\n</code></pre>"},{"location":"Angular/rxjs/#useful-operators","title":"Useful Operators","text":"<pre><code>//filter results\nfilter((value) =&gt; {\n    return valur % 2 == 0 // return even numbers\n})\n\n// throttle events\nthrottleTimeout(1000) // 1 event per second emitted\n\n// wait for inactivity before emitting\ndebounceTime(500) // emit after half second of no change\n\n//dont emit duplicate values\nmap((event) =&gt; event.target.value) // every event is unique so use value\ndistinctUntilChanged() \n\nreduce((total, currentVal) =&gt; {}, 0) // apply a function to all elements and return total\n\nscan((total, currentVal) =&gt; {}, 0) // same as above but return each intermiediate value (imagine long runing counter)\n\n// pluck is cleaner than map for selecting properties\npluck('target', 'value')\n// replaces...\nmap(event =&gt; event.target.value)\n\nmergeMap() // see docs\n// can take data from two observables and merge\n</code></pre>"},{"location":"Angular/syntax/","title":"syntax","text":"<pre><code>&lt;a [routerLink]=\"''\"&gt;\n&lt;a routerLink=\"\"&gt;\n</code></pre>"},{"location":"Bash/Cheatsheet/","title":"Bash Cheatsheet","text":""},{"location":"Bash/Cheatsheet/#login-with-kinit","title":"Login with kinit","text":"<pre><code>printf $PASSWORD | kinit $USERNAME@CONTOSO.COM \nklist\n</code></pre>"},{"location":"Bash/Cheatsheet/#looping-ifs","title":"Looping &amp; IFS","text":"<p>IFS stands for \"internal field separator\". It is used by the shell to determine how to do word splitting, i. e. how to recognize word boundaries.</p> <pre><code>THINGS=\"foo \\\nbar \\\nbaz\"\n\nfor THING in THINGS; do\n    echo $THING\ndone\n</code></pre> <pre><code>IFS=';'\nTHINGS=\"foo;\\\nbar;\\\nbaz\"\n\nfor THING in THINGS; do\n    echo $THING\ndone\n</code></pre>"},{"location":"Bash/Cheatsheet/#unset","title":"Unset","text":"<pre><code># remove function\nunset -f SomeFunction\n</code></pre>"},{"location":"Bash/Cheatsheet/#find","title":"Find","text":"<pre><code># find files in ./dir\nfind ./dir -type f\n\n# find files in ./dir but not with name hidden\nfind ./dir -type f -not \\( -name hidden \\)\n</code></pre> <pre><code>-maxdepth 1\n-type d \n-name '*.md'\n-printf \"\\\"%p\\\" \"\n</code></pre>"},{"location":"Bash/Cheatsheet/#get-top-10-ip-address-with-count-of-established-connections","title":"Get top 10 IP address with count of established connections","text":"<pre><code>ss -tnp | awk '\n{\n    gsub(/\\[::ffff:/, \"\", $5); gsub(/\\]/, \"\", $5);\n    split($5, remote, \":\");\n    print remote[1];\n}' | sort | uniq -c | sort -nr | head -n 10\n</code></pre>"},{"location":"C%23/Collections/","title":"Collections","text":""},{"location":"C%23/Collections/#when-to-use-what","title":"When to use what","text":"<p>Note: each interface builds on top of the first</p> <ul> <li>IEnumerable: When you only care about looping (GetEnumerator)</li> <li>ICollection: When you care about size (Count) or modifying (Add/Remove)</li> <li>IList: When you want to modify and care about positions of elements (Indexing)</li> </ul>"},{"location":"C%23/Null/","title":"Null","text":"<p>is evil.</p>"},{"location":"C%23/Null/#null-object-pattern","title":"Null Object Pattern","text":"<p>Where possible create an object that cant stand in place of null and has null-like or no behaviour in the context of the business logic</p> <pre><code>// making class a singleton for better performance\npublic class VoidWarranty : IWarrany\n{\n    [ThreadStatic]\n    private static VoidWarranty _instance;\n\n    private VoidWarranty() { }\n\n    public static VoidWarranty =&gt; \n    {\n        if (_instance == null)\n        {\n            _instance = new VoidWarranty();\n        }\n        return _instance;\n    }\n\n    // this handles the behaviour \"as if\" the warranty was null\n    // i.e. do nothing\n    public void Claim(DateTime date, Action onValidClaim) { }\n}\n</code></pre>"},{"location":"C%23/Null/#option-pattern","title":"Option Pattern","text":"<p>A lightweight implementation</p> <p><pre><code>class Option&lt;T&gt; : IEnumerable&lt;T&gt;\n{\n    private IEnumerable&lt;T&gt; Content { get; }\n\n    private Option(IEnumerable&lt;T&gt; content)\n    {\n        this.Content = content;\n    }\n\n    public static Option&lt;T&gt; Some(T value) =&gt; new Option&lt;T&gt;(new[] {value});\n\n    public static Option&lt;T&gt; None() =&gt; new Option&lt;T&gt;(new T[0]);\n\n    public IEnumerator&lt;T&gt; GetEnumerator() =&gt; this.Content.GetEnumerator();\n\n    IEnumerator IEnumerable.GetEnumerator() =&gt; this.GetEnumerator();\n}\n</code></pre> <pre><code>static class EnumerableExtensions\n{\n    public static void Do&lt;T&gt;(this IEnumerable&lt;T&gt; sequence, Action&lt;T&gt; action)\n    {\n        foreach (T obj in sequence)\n            action(obj);\n    }\n}\n</code></pre></p> <p>For more heavy weight implementation:</p> <ul> <li>https://github.com/nlkl/Optional</li> <li>https://github.com/louthy/language-ext#optional-and-alternative-value-monads</li> </ul>"},{"location":"C%23/Project%20File/","title":"Project File","text":"<pre><code>&lt;&gt;\n&lt;Project Sdk =\"Microsoft.NET.Sdk\" &gt; \n&lt;PropertyGroup &gt; \n    &lt;OutputType &gt; Exe &lt;/OutputType &gt; \n    &lt;TargetFramework &gt; net5.0 &lt;/TargetFramework &gt; \n    &lt;RuntimeIdentifiers &gt; win10-x64; osx-x64; rhel. 7.4-x64 &lt;/RuntimeIdentifiers &gt; \n\n    &lt;!-- &gt;OPTIONAL: embeds pdb files into the exe &lt;!--&gt;\n    &lt;DebugType&gt;embed&lt;DebugType&gt;\n&lt;/PropertyGroup &gt; \n&lt;/Project &gt;\n</code></pre>"},{"location":"C%23/Stack%20vs%20Heap/","title":"Stack vs Heap","text":""},{"location":"C%23/Stack%20vs%20Heap/#stack","title":"Stack","text":"<p>Each thread has its own stack memory (could be considered the state of the thread). Value types are stored on the stack and removed once they loose scope, i.e. the method has finished and returned control to the caller. </p> <p>Value types are defined using the <code>struct</code> keyword </p>"},{"location":"C%23/Stack%20vs%20Heap/#heap","title":"Heap","text":"<p>Any thread can access data stored on the heap. Reference Types, i.e. inherit System.Object, are placed on the heap and a reference (or pointer) to them is placed on the stack. When memory pressure occurs the GC stops all threads, removes any data that no longer has references and compacts the remaining data, which can be expensive.</p> <p>Reference types are defined using the <code>class</code> keyword.</p>"},{"location":"C%23/Stack%20vs%20Heap/#string-is-a-refernce-type-that-acts-like-a-value-type","title":"String is a Refernce type that acts like a Value type","text":"<p>In .Net Framework Strings are immutable reference types. All .net datatypes has default size except string and user type. So String is a Reference type, because it does not have default allocation size.</p> <p>Immutable means, it cannot be changed after it has been created. Every change to a string will create a new string. This is why all of the String manipulation methods return a string.</p> <p>For an example, an integer (System.Int32 ) has a fixed memory size(4 bytes) of Value range -2,147,483,648 through 2,147,483,647. Hence, an integer can be stored on the Stack (i.e. fixed memory). Alternatively, a String does not have a pre-defined memory size and it can be huge(the value range may be 0 to approximately 2 billion Unicode characters), so it requires dynamic memory allocation.</p> <p>When a String object is created, the actual value is stored within dynamic memory, or on the Heap. Because strings can be much larger than the size of a pointer, they are designed as reference types but becuase they are immutable they act as if they were value types.</p>"},{"location":"C%23/asynchrony/","title":"Asynchrony","text":"<p>I/O-bound: Your code will be \"waiting\" for something, such as data from a database. Because there is now \"work\" to do creating a new thread for this is inefficient</p> <p>CPU-bound: Your code will be performing an expensive computation. In this case a new thread makes sense</p>"},{"location":"C%23/asynchrony/#task-based","title":"Task Based","text":"<p>The <code>async</code> keyword enables await.</p> <p>The <code>await</code> keyword effectively pauses and waits for the awaitable, meaning no work is carried out, but the thread is no blocked so it is an \"asynchronous wait\".</p> <p>The type <code>Task</code> is awaitable which is why 99% of the time you return a Task or Task. <p>When a task is completed the remainder of the async method resumes on a context captured at the time. - If you\u2019re on a UI thread, then it\u2019s a UI context. - If you\u2019re responding to an ASP.NET request, then it\u2019s an ASP.NET request context. - Otherwise, it\u2019s usually a thread pool context (so it \"can\" be in a different thread)</p> <p>The above is acheived because asp.net and Winforms extends <code>SynchronizationContext</code>, the base of which simple calls ThreadPool. </p> <pre><code>// constructing tasks\nvar t = new Task(() =&gt; {}); // Task(Action)\nt.Start();\n\nvar state = \"foo\";\nvar t = new Task((state) =&gt; {}) // Task(Action, State)\nt.Start();\n\n// create a list of tasks and wait for all. Good for I/O bound work (because it doesnt create dedicated threads)\nvar getUserTasks = new List&lt;Task&lt;User&gt;&gt;();\nforeach (int userId in userIds)\n{\n    getUserTasks.Add(GetUserAsync(userId)); \n}\nreturn await Task.WhenAll(getUserTasks);\n\n// same with linq but linq\nvar getUserTasks = userIds.Select(id =&gt; GetUserAsync(id));\nreturn await Task.WhenAll(getUserTasks);\n\n// This queues up the work on the threadpool. Good for CPU-bound work (creates dedicated thread)\n// DoExpensiveCalculation should be synchronours allowing the caller to decide how to handle it\nvar expensiveResultTask = Task.Run(() =&gt; DoExpensiveCalculation(data), cancellationToken);\n\n// Task.Run() is a shortcut to\nTask.Factory.StartNew(() =&gt; {});\n\n// Yield forces method to return to caller and run async\n// good for making an sychronous method (background service) async\n// it will still run on the main thread but at a later time to keep it responsive\nawait Task.Yield();\n\n// To force synchronous, i.e. block the thread\ntask.Wait(); // throws AggregateException\ntask.Result;\ntask.GetAwaiter().GetResult(); // throws the actual exception\n\n// to bypass the default synchronization context\n// redundant in asp.net core\n.ConfigureAwait(false);\n//if you\u2019re writing app-level code, do not use ConfigureAwait(false)\n//if you\u2019re writing general-purpose library code, use ConfigureAwait(false)\n//becuase it doesnt need to interacts with the app model like asp.net\n//but be aware of delgates being passed to the library as that would class as app-domain code. \n</code></pre>"},{"location":"C%23/asynchrony/#event-based","title":"Event Based","text":"<p>You can define your own event handler but M$ provide two defaults <pre><code>public delegate void EventHandler( object sender, EventArgs e); \npublic delegate void EventHandler &lt; TEventArgs &gt;( object sender, TEventArgs e);\n</code></pre></p> <p>You define an event. Client code then subscribes to the event and handles it as required <pre><code>class Person \n{\n    // the keyword event simply stops client code from replacing\n    // already subscribed delegates\n    public event EventHandler&lt;f&gt; Shout;\n\n    public void Poke(){\n        // if someone is listening\n        if (Shout != null){\n            // then call the delegate\n            Shout(this, EventArgs.Empty) // sender, args\n        }\n    }\n}\n\n// method must match signature\nprivate static void HandleShout(object sender, EventArgs e)\n{\n    var person = sender as Person;\n    Console.Writeline(\"Has been poked\")\n}\n\nvar harry = new Person();\n// can assign multiple delegates to the event\nharry.Shout += HandleShout;\nharry.Poke();\n</code></pre></p>"},{"location":"C%23/cheatsheet/","title":"Cheatsheet","text":""},{"location":"C%23/cheatsheet/#stylish","title":"Stylish","text":"<pre><code>// target-typed new (mainly for fields/properties)\nMyType foo = new(\"str\", \"str\");\nDictionary&lt;String, String&gt;() myDict = new();\n\n// ctor deconstruction\npublic MyClass(String p1, String p2) =&gt; (_p1, _p2) = (p1, p2)\n\n// pattern matching, s is assigned within if only when true\nif (shape is Square s)\n    return s.Side * s.Side;\n\n// instead of someEnumerable.ToArray();\nvar arr = someEnumerable as EventViewDto[] ?? someEnumerable.ToArray();\n</code></pre>"},{"location":"C%23/cheatsheet/#syntax","title":"Syntax","text":"<pre><code>// Verbatim - \\t is not a tab\n@\"C:\\tmp\" \n\n// Interpolated\n$\"{fruit} costs {price:C}\" \n\n// declare type as nullable,  &lt;Nullable&gt;enabled&lt;/Nullable&gt;\nint? length; \n\n// suppress \"not-initialized\" warning if needed (eg unit tests without ctor)\n// prefer to use a ctor to ensure initialized\nstring foo = default!;\n\n// null conditional - null if people is null\npeople?.Length; \npeople?[0];\n\n// null forgiving operator - asure compiler people is not null\npeople!.Length; \n\n// null coalescing\nvar result = auther?.Name ?? \"unknown\";\nreturn name ?? throw new ArgumentNullExcpetion(nameof(name) \"Cannot be null\");\nvar name ??= \"dave\";\n\n// value comparison for value types and records\n// reference comparison for objects\n== != \n</code></pre>"},{"location":"C%23/cheatsheet/#access-modifiers","title":"Access Modifiers","text":"<pre><code>protected // can only access from this or derived class\ninternal // can only access from within same assembly\n\nprotected internal // protected OR internal\n// i.e. public internally, only via inheritance externally\n\nprivate protected // protected AND internal\n// i.e. only via inheritance and only internally. \n\nsealed // disable further inheritance\n// my opinion, use for anything not specifically designed for inheritance in a library\n// but not so important in appliction code\n</code></pre>"},{"location":"C%23/cheatsheet/#numerics","title":"Numerics","text":"<p>use int for whole numbers use double for real numbers that wont be compared to other values use decimal when accuracy is important</p> <ul> <li><code>half</code> binary16, doesnt exists in c#</li> <li><code>float</code> binary32, 4 bytes</li> <li><code>double</code> binary64, 8 bytes, do not use if accuracy is important like financial or missles.</li> <li><code>decimal</code> binary128, 16 bytes</li> </ul> <pre><code>https://ciechanow.ski/exposing-floating-point/\n\nScientific notation is &lt;sign&gt;&lt;significand&gt; x 2^&lt;exponent&gt;\n\u22122343.53125 = -1.0010010011110001 x 2^11 \n\nBinary Representation &lt;sign&gt;&lt;exponent&gt;&lt;significand&gt;\n1 10001010 00100100111100010000000\n\nNote that the exponent 11 is 10001010 (138) due to \"biasing\"\nthis is basically ignoring the sign of the exponent and shifting the numbers accordingly\n</code></pre> <pre><code>// can be represented in decimal, binary and hex\nint decimal = 2_000_000;\nint binaryNotation = 0b_0001_1110_1000_0100_1000_0000; \nint hexadecimalNotation = 0x_001E_8480;\n\n//\nfloat f = 1.0f; // or F\ndouble do = 2.0; // or d or D\ndecimal dec = 2.0m; // or M\n</code></pre>"},{"location":"C%23/cheatsheet/#tuples","title":"Tuples","text":"<pre><code>// named tuples\npublic (string Name, int Number) GetNamedFruit() \n{ \n    return (Name: \"Apples\", Number: 5); \n}\n\n// deconstruct\n(string myName, int myNumber) = GetNamedFruit();\nConsole.WriteLine($\"{myName} and {myNumber} now declared\");\n</code></pre>"},{"location":"C%23/cheatsheet/#methods","title":"Methods","text":"<pre><code>public void PassingParameters( int byValue, in int byIn, ref int byRef, out int byOut)\n{\n    // byValue is default, changes to byValue are scoped and do not affect\n    // however if byValue is a reference type changes to its properties are possible\n\n    // in specifies that this parameter is passed by reference but is only read by the called method.\n    // in is actually a ref readonly. Generally speaking, there is only one use case where in can be helpful: high performance apps dealing with lots of large readonly structs to save on copying\n\n    // ref specifies that this parameter is passed by reference and may be read or written by the called method. (unscoped)\n\n    // out will create a variable to store result in in the calling scope.\n}\n\n// params modifier allows variable number of arguments\npublic static void UseParams(params int[] list) {}\nUseParams(1,2,3,4)\npublic static void UseParams2(params object[] list) {}\nUseParams(1, 2, \"three\", 4, \"five\")\n</code></pre>"},{"location":"C%23/cheatsheet/#switch-expression","title":"Switch Expression","text":"<pre><code>string output = i switch\n{\n    int fb when fb % 3 == 0 &amp;&amp; fb % 5 == 0 =&gt; \"fizzbuzz\",\n    int f when f % 3 == 0 =&gt; \"fizz\",\n    int b when b % 5 == 0 =&gt; \"buzz\",\n    _ =&gt; i.ToString(),\n};\n</code></pre>"},{"location":"C%23/cheatsheet/#records","title":"Records","text":"<pre><code>public record Pet {\n    public string Name { get; init; }\n    public string Animal { get; init; }\n}\n\nvar myPet = Pet { Name: \"kitty\", Animal: \"Dog\" };\nvar newPet = myPet with {Animal: \"Cat\"};\n</code></pre>"},{"location":"C%23/delegates/","title":"Delegates","text":"<p>Delegates are pointers to methods that can be passed as variables.</p> <p>A <code>delegate</code> keyword defines a delegate type or an anonymous function that can be converted to a delegate type.</p> <p>An <code>Action&lt;T&gt;</code> delegate points to a method that takes one or more arguments but returns no value.</p> <p>A <code>Func&lt;T&gt;</code> delegate points to a method that takes one of more arguments and returns a value.</p> <p>A Predicate takes one or more arguments and returns a bool, i.e. <code>Func&lt;T,bool&gt;</code></p> <pre><code>public static void SomeMethod(string str)\n{\n    Console.WriteLine(str);\n}\n\npublic delegate void Del(string str);\n\nstatic void Main(string[] args)\n{\n    // delegates\n    Del namedDelegate = SomeMethod;\n    namedDelegate(\"foo\");\n\n    Del lambdaDelegate = str =&gt; Console.WriteLine(str);\n    lambdaDelegate(\"bar\");\n\n    // anon function, better to use lambda in most cases\n    Del anonDelegate = delegate(string str) { Console.WriteLine(str); };\n    anonDelegate(\"baz\");\n\n    // actions\n    Action&lt;string&gt; actionMethod = new(SomeMethod);\n    Action&lt;string, string&gt; actionLambda = (s1, s2) =&gt; Console.WriteLine($\"{s1} {s2}\");\n    Action&lt;string, string&gt; actionAnon = delegate(string s, string s1) {  };\n\n    actionMethod(\"hello\");\n    actionLambda.Invoke(\"hello\", \"world\");\n\n    // funcs\n    Func&lt;int, int&gt; funcLambda = i =&gt; i * i;\n    Console.WriteLine($\"Func: {funcLambda(2)}\");\n}\n</code></pre>"},{"location":"C%23/equality/","title":"Equality","text":"<pre><code>public sealed class RelationshipStateDto : IEquatable&lt;RelationshipStateDto&gt;\n{\n    public RelationshipStateDto(Guid id, DateTime published, List&lt;RelationshipDto&gt; relationships)\n    {\n        Id = id;\n        Published = published;\n        Relationships = relationships ?? new List&lt;RelationshipDto&gt;();\n    }\n\n    public Guid Id { get; }\n    public DateTime Published { get; }\n    public List&lt;RelationshipDto&gt; Relationships { get; }\n\n    #region Equality\n\n    public bool Equals(RelationshipStateDto other)\n    {\n        if (ReferenceEquals(null, other))\n        {\n            return false;\n        }\n\n        if (ReferenceEquals(this, other))\n        {\n            return true;\n        }\n\n        return Id.Equals(other.Id) &amp;&amp; Published.Equals(other.Published) &amp;&amp;\n               Relationships.SequenceEqual(other.Relationships);\n    }\n\n    public override bool Equals(object obj) =&gt;\n        ReferenceEquals(this, obj) || obj is RelationshipStateDto other &amp;&amp; Equals(other);\n\n    public override int GetHashCode() =&gt; HashCode.Combine(Id, Published, Relationships);\n\n    public static bool operator ==(RelationshipStateDto left, RelationshipStateDto right) =&gt; Equals(left, right);\n\n    public static bool operator !=(RelationshipStateDto left, RelationshipStateDto right) =&gt; !Equals(left, right);\n\n    #endregion\n}\n</code></pre>"},{"location":"C%23/linq/","title":"LINQ","text":""},{"location":"C%23/spans/","title":"Spans &amp; Memory","text":"<p><code>Span&lt;T&gt;</code> is a <code>ref struct</code> which means it is always allocated on the stack. This is more effecient that using heap Because it can only be allocated it cannot be used with async methods</p> <p>For spans that represent immutable or read-only structures, use <code>ReadOnlySpan&lt;T&gt;</code>.</p>"},{"location":"C%23/spans/#slicing","title":"Slicing","text":"<p>This allows you to work with a section on allocated memory without having to first copy it.</p> <pre><code>int[] arr = new[] {1, 2, 3, 4, 5, 6, 7, 8, 9};\nSpan&lt;int&gt; span = arr.AsSpan();\n\nSpan&lt;int&gt; firstThree1 = span.Slice(start: 0, length: 3);\nSpan&lt;int&gt; firstThree2 = span[0..3];\nSpan&lt;int&gt; firstThree3 = span[new Range(start: 0, end: 3)]; // implicit conversion in Index\n\nSpan&lt;int&gt; lastThree1 = span[^3..]; // ^ meaning \"from end\"\nSpan&lt;int&gt; lastThree2 = span[Range.StartAt(new Index(3, fromEnd: true))];\n</code></pre> <p>The same can be done with string but using <code>ReadOnlySpan&lt;char&gt;</code> because strings are immutable. This is better than using <code>Substring()</code> when doing extensive string manipulation because it does not require allocating and copying the original string.</p> <pre><code>string name = \"Scott Matthews\";\nReadOnlySpan&lt;char&gt; nameSpan = name.AsSpan();\nReadOnlySpan&lt;char&gt; nameSpanAlt = \"Scott Matthews\"; // implicitly converts\n// Could refactor to SomeMethod(ReadOnlySpan&lt;char&gt; str)\n\nint lengthOfFirst = name.IndexOf(\" \", StringComparison.Ordinal);\nint lenghtOfLast = name.Length - lengthOfFirst - 1;\n\nvar firstName = nameSpan[0..lengthOfFirst];\nvar lastName = nameSpan[^lenghtOfLast..];\n</code></pre>"},{"location":"C%23/spans/#use-span-instead-of-string","title":"Use Span instead of string","text":""},{"location":"C%23/versions/","title":"Versions","text":"<p>When buildin you can pass <code>/p:Version=${version}\"</code> to have it burnt into the binary and then access it at runtime with </p> <pre><code>public static string GetSemVer(this Assembly? assembly) =&gt;\n        assembly?.GetCustomAttribute&lt;AssemblyInformationalVersionAttribute&gt;()?.InformationalVersion ?? \"0.0.0\";\n</code></pre>"},{"location":"C%23/Libs/Akka.Net/","title":"Akka.Net","text":"<p>https://gigi.nullneuron.net/gigilabs/asynchronous-and-concurrent-processing-in-akka-net-actors/ https://medium.com/zdjohn/multi-threading-in-akka-net-async-v-s-pipeto-60967f0b312a</p>"},{"location":"C%23/Libs/EF%20Core/","title":"EF Core","text":"<pre><code>var documents = context.LatestStates\n    .AsNoTracking() // perf++ readonly query\n    .Select(ls =&gt; new QueryResult() // perf++ project only required properties\n    {\n        Name = ls.Asset.Name, // creates JOIN to asset table\n        Type = ls.Asset.Subtype.Type.Name, // creates two JOINs to related tables\n        Subtype = ls.Asset.Subtype.Name,\n        JsonData = ls.AssetState.JsonData // creates JOIN to assetState table\n    })\n    .AsEnumerable() // streaming (not buffering)\n    .Select(NewElasticDocument) // client side transformation\n    .ToList();\n</code></pre>"},{"location":"C%23/Libs/EF%20Core/#explicit-tracking","title":"Explicit tracking","text":"<p>The following avoids the need to query the db and pull back all data before an update  but does some with the risk of Exceptions if the entity does not exist in the db. </p> <pre><code>var entityToUpdate = new MyEntity()\n{\n    Id = \"1234\",\n};\n\n_context.Attach(entityToUpdate);\nentityToUpdate.PublishedDate = \"2012\";\n\nawait _context.SaveChangesAsync();\n</code></pre>"},{"location":"C%23/Libs/EF%20Core/#viewing-changes","title":"Viewing Changes","text":"<pre><code>_context.ChangeTracker.DetectChanges();\nConsole.WriteLine(_context.ChangeTracker.DebugView.LongView);\n</code></pre>"},{"location":"C%23/Libs/Markdig/","title":"Markdig","text":"<p>good for rendering openai output into html in Blazor</p> <p><pre><code>&lt;div class=\"markdown-output\" style=\"white-space: pre-wrap;\"&gt;\n  @((MarkupString)_aiSearchResponseHtml)\n&lt;/div&gt;\n</code></pre> <pre><code>await foreach (var part in SearchAssistant.GetStreamingResponse(_aiSearchTerm))\n{\n  _aiSearchResponse += part;\n  _aiSearchResponseHtml = Markdig.Markdown.ToHtml(_aiSearchResponse);\n  await InvokeAsync(StateHasChanged);\n}\n</code></pre></p> <p>you can also extend it to take more control of rendering or parsing</p> <p><pre><code>var pipeline = new MarkdownPipelineBuilder()\n  .Use&lt;MyMarkdownExtension&gt;()\n  .Build();\n\n_aiSearchResponseHtml = Markdig.Markdown.ToHtml(_aiSearchResponse, pipeline);\n</code></pre> <pre><code>public class MyMarkdownExtension : IMarkdownExtension\n{\n    public void Setup(MarkdownPipelineBuilder pipeline)\n    {\n    }\n\n    public void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer)\n    {\n        if (renderer is not HtmlRenderer) return;\n\n        // remove the built in code block renderer\n        var codeBlockRenderer = renderer.ObjectRenderers.FindExact&lt;CodeBlockRenderer&gt;();\n\n        if (codeBlockRenderer is not null)\n        {\n            renderer.ObjectRenderers.Remove(codeBlockRenderer);\n        }\n        else\n        {\n            codeBlockRenderer = new CodeBlockRenderer();\n        }\n\n        renderer.ObjectRenderers.AddIfNotAlready(\n            new CustomCodeBlockRenderer(\n                codeBlockRenderer\n            )\n        );\n    }\n}\n</code></pre> <pre><code>public class CustomCodeBlockRenderer : HtmlObjectRenderer&lt;CodeBlock&gt;\n{\n    private readonly CodeBlockRenderer _underlyingCodeBlockRenderer;\n\n    public CustomCodeBlockRenderer(CodeBlockRenderer underlyingCodeBlockRenderer)\n    {\n        _underlyingCodeBlockRenderer = underlyingCodeBlockRenderer;\n    }\n\n    protected override void Write(HtmlRenderer renderer, CodeBlock obj)\n    {\n        // renders using normal renderer but adds a button afterwards\n        _underlyingCodeBlockRenderer.Write(renderer, obj);\n        renderer.Write(\"\"\"&lt;button type=\"button\" class=\"btn btn-primary\" @onclick=\"AiSearch\"&gt;Try It&lt;/button&gt;\"\"\");\n    }\n}\n</code></pre></p>"},{"location":"C%23/Testing/ASP.net%20Tests/","title":"ASP.NET Tests","text":""},{"location":"C%23/Testing/ASP.net%20Tests/#webapplicationfactory-for-integration-tests-with-testcontainers","title":"WebapplicationFactory for Integration Tests with TestContainers","text":"<p>Setup containers in <code>MyApplicationFactory.cs</code> <pre><code>public class MyApplicationFactory : WebApplicationFactory&lt;Program&gt;, IAsyncLifetime\n{\n    private readonly IContainer _memGraph;\n\n    public GraphServiceApplicationFactory()\n    {\n        _memGraph = CreateMemGraphContainer();\n    }\n\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\n    {\n        builder.UseEnvironment(\"Development\");\n\n        builder.ConfigureTestServices(services =&gt;\n        {\n            // change bootstrap services here\n        });\n    }\n\n    private IContainer CreateMemGraphContainer() =&gt; new ContainerBuilder()\n        .WithImage(\"memgraph/memgraph-mage:1.18.1-memgraph-2.18.1\")\n        .WithPortBinding(7687, 7687)\n        .WithPortBinding(7444, 7444)\n        .WithEnvironment(\"MEMGRAPH_USER\", \"admin\")\n        .WithEnvironment(\"MEMGRAPH_PASSWORD\", \"\")\n        .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(7687))\n        .Build();\n\n    public async Task InitializeAsync()\n    {\n        await _memGraph.StartAsync();\n    }\n\n    Task IAsyncLifetime.DisposeAsync()\n    {\n        return _memGraph.DisposeAsync().AsTask();\n    }\n}\n</code></pre></p> <p>Then use in Xunit class fixture</p> <pre><code>public class MyTests : IClassFixture&lt;MyApplicationFactory&gt;\n{\n    private readonly MyApplicationFactory _factory;\n\n    public BootstrapTests(MyApplicationFactory factory)\n    {\n        _factory = factory;\n    }\n\n    [Fact]\n    public void Test()\n    {\n        var driver = _factory.Services.GetRequiredService&lt;IDriver&gt;();\n        using var session = driver.Session();\n        // etc\n    }\n</code></pre>"},{"location":"C%23/Testing/ASP.net%20Tests/#override-config-sources","title":"Override config sources","text":"<p>https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1235651426</p> <pre><code>    protected override void ConfigureWebHost(IWebHostBuilder builder)\n    {\n        builder.UseEnvironment(\"Development\");\n\n        var config = new ConfigurationBuilder()\n            .AddInMemoryCollection(new Dictionary&lt;string, string?&gt;()\n            {\n                { $\"{MemGraphConfiguration.Section}:Uri\", \"bolt://localhost:7687\" },\n                { $\"{MemGraphConfiguration.Section}:Username\", \"admin\" },\n                { $\"{MemGraphConfiguration.Section}:Password\", \"password\" },\n            })\n            .Build();\n        builder.UseConfiguration(config);\n</code></pre>"},{"location":"C%23/Testing/ASP.net%20Tests/#background-service","title":"Background Service","text":"<pre><code>[Test]\npublic async Task BackgroundService_ShouldCatchAndLogErrors(){\n    _clientMock\n        .Setup(m =&gt; m.GetData())\n        .Throws&lt;Exception&gt;();\n\n    using (var cts = new CancellationTokenSource())\n        {\n            await Task.WhenAny(\n                _sut.StartAsync(cts.Token), \n                Task.Delay(1000, cts.Token));\n            cts.Cancel();\n        }\n\n    _client.Verify(m =&gt; m.GetData(), Times.AtLeast(1));\n    _loggerMock.Verify(\n        m =&gt; m.Log(\n            It.Is&lt;LogLevel&gt;(l =&gt; l == LogLevel.Error),\n            It.IsAny&lt;EventId&gt;(),\n            It.Is&lt;It.IsAnyType&gt;((obj, type) =&gt; true),\n            It.IsAny&lt;Exception&gt;(),\n            It.Is&lt;Func&lt;It.IsAnyType, Exception, string&gt;&gt;((obj, type) =&gt; true)\n        ), \n        Times.AtLeast(1));\n}\n</code></pre>"},{"location":"C%23/Testing/ASP.net%20Tests/#setup-controller-as-sut","title":"Setup Controller as SUT","text":"<pre><code>_sut = _fixture\n    .Build&lt;MyController&gt;()\n    .OmitAutoProperties()\n    .Create();\n</code></pre>"},{"location":"C%23/Testing/ASP.net%20Tests/#controller-endpoint-attributes","title":"Controller Endpoint Attributes","text":"<pre><code>[Test]\npublic void MyController_UsesCorrectAttributes(){\n    var endpointMethod = _sut.GetType().GetMethod(\"SomeEndpoint\");\n\n    Assert.That(endpointMethod, Has.Attribute&lt;HttpGetAttribute&gt;())\n    Assert.That(endpointMethod, Has.Attribute&lt;RouteAttribute&gt;().Property(\"Template\").EqualTo(\"books/{id}\"));\n}\n</code></pre>"},{"location":"C%23/Testing/ASP.net%20Tests/#controller-endpoint-response","title":"Controller Endpoint Response","text":"<pre><code>// Arrange\nvar books = _fixture.CreateMany&lt;BookDto&gt;().ToList();\n_bookRepoMock\n    .Setup(m =&gt; m.GetBooks())\n    .Returns(books);\n\n// Act\nvar response = await _sut.MyEndpointMethod();\n\n// Assert\n_bookRepoMock.Verify(m  =&gt; m.GetBooks(), Times.Once);\n\nAssert.That(response, Is.TypeOf&lt;OkObjectResponse&gt;()));\nvar objResponse = response as OkObjectResponse;\n\nAssert.That(objResponse?.Value, Is.Not.Null);\nAssert.That(objResponse!.Value, Is.TypeOf&lt;BookDto[]&gt;());\nvar booksResult = objResult as BookDto[];\n\nAssert.That(booksResult, Is.Not.Null.And.Not.Empty);\nAssert.That(\n    booksResult!.Select(b =&gt; b.Title),\n    Is.EquivalentTo(books.Select(b =&gt; b.Title));\n);\n</code></pre>"},{"location":"C%23/Testing/Akka.net%20Tests/","title":"Akka.net Tests","text":""},{"location":"C%23/Testing/Auto%20Fixture/","title":"Auto Fixture","text":"<p>Makes setting up tests faster and less prone to breaking when refactoring.</p> <p>The way AutoFixture works is be looking for public constructors and writable properties and creating these objects with generated values. </p> <pre><code>[TestFixture]\npublic class SomeTests \n{\n    private IFixture _fixture;\n\n    [SetUp]\n    public void BeforeEachTest()\n    {\n        _fixture = new Fixture().Customize()\n\n        var generatedString = _fixture.Create&lt;string&gt;(); // generate a string\n        var generatedString = _fixture.Create&lt;string&gt;(\"Name\"); // seed generated string with a hint to its use\n        var generatedClass = _fixture.Create&lt;MyClass&gt;(); // uses public constructor to generate\n\n        var generatedEnumerable = _fixture.CreateMany&lt;T&gt;(); // defaults to 3 but can override with int for desired number\n        _fixture.RepeatCount = 5 // override default for many\n\n        var myList = new List&lt;T&gt;();\n        _fixture.AddManyTo(myList);\n\n        // set a particular property\n        var mc = fixture.Build&lt;MyClass&gt;()\n                .With(x =&gt; x.MyText, \"Ploeh\")\n                //.Without(p =&gt; p.Spouse)\n                .Create();\n\n        // disable \n        var sut = fixture.Build&lt;Vehicle&gt;()\n                 .OmitAutoProperties()\n                 .Create();\n    }\n}\n</code></pre>"},{"location":"C%23/Testing/Auto%20Fixture/#register-inject-or-freeze","title":"Register, Inject or Freeze?","text":"<p> Stack Overflow: cant-grasp-the-difference-between-freeze-inject-register</p> <p>tl;dr Register is considered legacy. Inject and Freeze replace it. </p> <pre><code>// Register\n// Informs AutoMock how to create objects that dont have public constructors, like interfaces\n// Note: in this case AutoMock (see below) would be a better approach\npublic MyClass(IMyInterface mi) {}\n\nfixture.Register&lt;IMyInterface&gt;(() =&gt; new FakeMyInterface());\nvar generatedClass = _fixture.Create&lt;MyClass&gt;(); \n\n_fixture.Register&lt;int, string, IMyInterface&gt;((i, s) =&gt; new FakeInterface(i, s));\n\n// Inject \n// simply wraps register like so\npublic static void Inject&lt;T&gt;(this IFixture, T item){\n    if (fixture == null)\n        throw new ArgumentException(nameof(fixture));\n    fixture.Register&lt;T&gt;(Func&lt;T&gt;(() =&gt; item));\n}\n\n// so to setup dependencies becomes\nvar foo = _fixture.Create&lt;Foo&gt;();\n_fixture.Inject(foo);\n\n// Freeze\n// will create and inject a object in one line\nvar foo = _fixture.Freeze&lt;Foo&gt;();\n</code></pre>"},{"location":"C%23/Testing/Auto%20Fixture/#auto-mocking-with-moq","title":"Auto-Mocking with Moq","text":"<p>Install <code>AutoFixture.AutoMoqNuGet</code> package to enable AutoFixture to create mocks of interfaces using AutoMoq.  AutoFixture will try to create an object in the normal way and fallback to Moq when required. </p> <pre><code>_fixture = new Fixture().Customize(new AutoMoqCustomization{ConfigureMembers = true});\n\n// without automoq this would fail because autofixture would not be able to create IClient\nvar _client = _fixture.Freeze&lt;IClient&gt;();\n\n// if you want to create and use a mock to verify calls you can explicitly \nvar _clientMock = _fixture.Freeze&lt;Mock&lt;IClient&gt;&gt;(); // this tells freeze to return the Mock instead of the Mock.Object\n_clientMock.Setup(...);\n</code></pre>"},{"location":"C%23/Testing/assertions/","title":"NUnit Assertions","text":"<p>NUnit provides the framework for writing tests. An alternative to NUnit is XUnit</p> <p>Docs {_target=blank}</p> <pre><code>[TestFixture]\npublic class SomeClassTests {\n    [SetUp]\n    public void BeforeEachTest(){\n        // setup \n    }\n\n    [Test]\n    public void SomeMethod_DoesSomething_WhenSomeCondition(){\n        // test\n    }\n\n    [TearDown]\n    public void AfterEachTest(){\n        // dispose\n    }\n}\n</code></pre>"},{"location":"C%23/Testing/assertions/#basics","title":"Basics","text":"<pre><code>// classic, easy to read\nAssert.AreEqual(1, 1) \n\n// constraint, more powerful\nAssert.That(array, Has.Exactly(1).EqualTo(obj))\n</code></pre> <p>Prefer to use contraints for consistency.  <code>Is</code> and <code>Has</code> are helper classes to create constraints</p> <pre><code>// null or emptiness tests\nAssert.That(obj, Is.Not.Null.And.Not.Empty);\nAssert.That(list, Is.Empty);\n\n// type tests\nAssert.That(obj, Is.TypeOf&lt;T&gt;()); // check type exactly, i.e. runtime type\nAssert.That(obj,  Is.InstanceOf&lt;IEnumerable&lt;T&gt;&gt;()); // check obj is type or derived from type\n\nAssert.That(obj, Has.Property(\"Version\"));\nAssert.That(array, Is.EquivalentTo(array)); // test that two IEnumerables have same elements in any order\nAssert.That(array, Has.Exactly(3).Items); // test size of IEnumerable\nAssert.That(array, Has.None.EqualTo(\"foo\"))\nAssert.That(array, Is.Unique) // no duplicates\nAssert.That(new int[] { 1, 2, 3 }, Has.Exactly(1).EqualTo(1).And.Exactly(1).EqualTo(3)); // &lt;Constraint&gt;.And.&lt;Constraint&gt;\n\nAssert.That(\n    array.Select(e =&gt; e.SomeProperty),\n    Has.All.EqualTo(\"foo\")); // check a property of all element in an array.\n</code></pre>"},{"location":"C%23/Testing/assertions/#check-method-attributes","title":"Check Method Attributes","text":"<pre><code>var someMethod = _sut.GetType().GetMethod(\"SomeMethod\");\nAssert.That(someMethod, Has.Attribute&lt;HttpGetAttribute&gt;()); // test an attribute exists\nAssert.That(someMethod, Has.Attribute&lt;RouteAttribute&gt;().Property(\"Template\").EqualTo(\"books/{id}\")); // test an attribute has desired property\n</code></pre>"},{"location":"C%23/Testing/assertions/#reusable-contraints","title":"Reusable Contraints","text":"<pre><code>// constraint must be declared as reusable to work as intended\nReusableConstraint myConstraint = Is.Not.Null;\nAssert.That(\"not a null\", myConstraint); \nAssert.That(\"not a null\", myConstraint);\n</code></pre>"},{"location":"C%23/Testing/assertions/#test-methods-throws-exception","title":"Test Methods Throws Exception","text":"<pre><code>Assert.That(SomeMethod, Throws.TypeOf&lt;ArgumentException&gt;());\nAssert.That(() =&gt; { throw new ArgumentException(); }, Throws.ArgumentException);\nAssert.That(() =&gt; SomeMethod(actual), Throws.Nothing);\nAssert.That(async () =&gt; await SomeMethodAsync(), Throws.Exception);\n</code></pre>"},{"location":"C%23/Testing/moq/","title":"Moq","text":"<p> Github Docs</p> <pre><code>mock.Setup(m =&gt; m.Name).Returns(\"Foo\"); // property will always return \"Foo\"\n\nmock.SetupProperty(m =&gt; m.Name); // property \"tracked\" so will update on the mock when set.\n</code></pre>"},{"location":"C%23/Testing/moq/#setup-mock-for-imemorycache","title":"Setup Mock for IMemoryCache","text":"<pre><code>// when testing _someRepository retrieves data once and caches it for subsequent calls.\nvar cacheKey = \"some-key\";\nvar cachedData = _fixture.CreateMany&lt;SomeClass&gt;().ToList();\n_someRepository.Setup(m =&gt; m.GetStuff()).Returns(cachedData);\n\n_cacheMock.SetupCacheMiss(cacheKey);\nvar result1 = await _sut.DoSomething();\n\n_cacheMock.SetupCacheHit(cacheKey, cachedData);\nvar result2 = await _sut.MapAll();\n\n_someRepository.Verify(m =&gt; m.GetStuff(), Times.Once);\n</code></pre> <pre><code>public static class MemoryCacheExtensions\n{\n    public static void SetupCacheMiss(this Mock&lt;IMemoryCache&gt; mock, object key)\n    {\n        object nothing;\n        mock\n            .Setup(c =&gt; c.TryGetValue(key, out nothing))\n            .Returns(false);\n    }\n\n    public static void SetupCacheHit(this Mock&lt;IMemoryCache&gt; mock, object key, object obj) =&gt; \n        mock\n            .Setup(c =&gt; c.TryGetValue(key, out obj))\n            .Returns(true);\n}\n</code></pre>"},{"location":"C%23/Testing/moq/#mocking-ilogger","title":"Mocking ILogger <p>In some cases it may be useful to verify logs are emitted.</p> <pre><code>_loggerMock.Verify(\n    m =&gt; m.Log(\n        It.Is&lt;LogLevel&gt;(l =&gt; l == LogLevel.Error),\n        It.IsAny&lt;EventId&gt;(),\n        It.Is&lt;It.IsAnyType&gt;((obj, type) =&gt; true),\n        It.IsAny&lt;Exception&gt;(),\n        It.Is&lt;Func&lt;It.IsAnyType, Exception, string&gt;&gt;((obj, type) =&gt; true)\n    ), \n    Times.AtLeast(1)\n);\n</code></pre>","text":""},{"location":"Certs/","title":"Certificates","text":"<pre><code># get info on cert from server\nopenssl s_client -connect \"hostname.com:443\" -showcerts\n</code></pre> <pre><code># check k8s cert\n\nkubectl --context &lt;cluster&gt; -n &lt;ns&gt; get secret my-ssl-cert -o json | jq -r '.data.\"tls.crt\"' | base64 -d | openssl x509 -text -noout | grep \"Not After\"\n</code></pre>"},{"location":"Coffee/","title":"Coffee","text":""},{"location":"Coffee/#baskets","title":"Baskets","text":"<p>58mm Standard 57mm Rare 53mm Commmon</p>"},{"location":"Coffee/#dualit-3-in-1","title":"Dualit 3-in-1","text":"<p>comes with 14g 51mm presurized basket</p>"},{"location":"DIY/painting/","title":"Painting Bathroom","text":"<p>This took me three days partly because I agonized over every detail I think I could do it in two next time but depends on size of the room</p>"},{"location":"DIY/painting/#tools-materials","title":"Tools + Materials","text":"<ul> <li>Paint <ul> <li>Prefer Farrow &amp; Ball (For bathroom it MUST be modern emulsion - the mould/damp resistant one)</li> <li>Told Little Greene is good too</li> </ul> </li> <li>Primer <ul> <li>Zinsser Bullseye 1-2-3 (water based)</li> <li>Zinsser BIN (shellac) (if needed)</li> </ul> </li> <li>Cutting in brush</li> <li>Painters Tape (only use frog tape)</li> <li>Roller (Small, Large or Both as needed) + Tray</li> <li>Sugar Soap</li> <li>Sponge + Cloth</li> <li>White Vinegar Spray (if cleaning mould)</li> <li>Sand Paper Block Coure and Fine (the spongey block)</li> <li>Filler (Bartoline All Purpose over polyfiller)</li> <li>Filling Knife</li> <li>Pipe Caps</li> <li>Rad Bleed Key</li> </ul>"},{"location":"DIY/painting/#prep","title":"Prep","text":""},{"location":"DIY/painting/#cleaning","title":"Cleaning","text":"<p>For Mould</p> <ul> <li>Spray with vinegar and leave for 30 mins</li> <li>spray and wipe with more vinegar using kitchen towel</li> <li>Mix bicarbonate and 50 degree water in spray bottle</li> <li>spray and leave for 30 mins</li> <li>spray and wipe with more solution using kitchen towel</li> </ul> <p>?? * Sand walls using course to remove old paint, follow with finer, ensure smooth * Wipe down with damp cloth to remove dust * (optional) spray walls with sugar soap spray and wipe down with clean sponge * Leave to dry throuroughly</p>"},{"location":"DIY/painting/#repairs","title":"Repairs","text":"<p>Fill any hairline cracks</p> <ul> <li>Rake out cracks, us blade at 45 degree angle to create a hold. ```/ is good, not _/_</li> <li>hoover and brush any dust/debris</li> <li>lightly wet any raw plaster</li> <li>fill using fine filler, I prefer Bartoline (MIX WELL it should be a smooth paste)</li> <li>Sand down using 100g soft sand pad.</li> <li>Spot Prime</li> </ul> <p>Fill any flaked paint or dents</p> <ul> <li>remove all flakey paint</li> <li>sand well with 180g</li> <li>fill using fine filler</li> <li>sand with 100g soft pad</li> <li>spot prime</li> </ul> <p>Fill any screw holes or nail damage</p> <ul> <li>Sand well down using 180g</li> <li>For drill holes sand just inside to create surface for filler to attach to</li> <li>For blown plaster from nails spot prime FIRST</li> <li>Fill using all purpose filler, I prefer Bartoline (for deep holes you may need to push in and add another layer after dry)</li> <li>sand down using 100g soft sand pad</li> <li>spot prime </li> </ul>"},{"location":"DIY/painting/#remove-towel-rail","title":"Remove Towel Rail","text":"<p>This was scary, plumbing is scary. Its doable and you will get a much much better finish</p> <p>Draining it take surprisingly long and I chicken out thinking the watter was still coming in. Be aware the water will be filthy.</p> <p>Recommend watching https://www.youtube.com/watch?v=6qFAJLSs1RE&amp;ab_channel=BestHeating </p> <ul> <li>Turn rad valves clockwise as far as they will go, make sure tight but dont force it</li> <li>Turn on heating, ensure rad stays cool</li> <li>Remove screws securing it to the wall brackets</li> <li>Put down a coupld towels and a bucket or kitchen sink... bucket</li> <li>Using adjustable spanner undo one of the connecting nuts (use cloth or tape to protect surface)</li> <li>Gently pull rad away from wall and drain into the bucket</li> <li>Once empty undo the other nut, gently pull away from wall brackets and tilt to drain the remaining water</li> <li>Store rad upside down in a safe place</li> <li>Screw pipe caps on (optional but just to be safe)</li> <li>Remove wall brackets makig a note of where each one goes (You can paint around them if you prefer, I did but it was a bit more hassle)</li> </ul> <p>Putting it back on is just the reverse of this PLUS</p> <ul> <li>First rad value, as water fills rad boiler pressure will tank. you can leave this value open</li> <li>Open filling loop to boiler to top up pressure, once the rad is full it should climb and decrease (never go above 2 bar max, 1.5 safe)</li> <li>If the pressure is stable the rad is full but including an air pocket</li> <li>Open the bleed key to let air out, use cloth around bleed valve to pretect the fresh paint, again this will decrease boiler pressure. I had to take it in turns opening the bleed value and topping up the boiler until the rad was completely filled. </li> </ul>"},{"location":"DIY/painting/#method","title":"Method","text":""},{"location":"DIY/painting/#priming","title":"Priming","text":"<p>Priming is optional and depends on the state of the wall. My bathroom wall was white and already painted so I choose not to prime the whole wall. You definately want to spot prime any damaged areas</p> <ul> <li>Zinsser BullsEye is good priming over filler (2 coats)</li> <li>Zinsser BIN is good paint blocking out stains like rising damp or unpainted wood (2 coats)</li> <li>Zinsser BIN is also good for painting over mastic, water based paint wont dry on mastic and sealant without a shellac base</li> </ul>"},{"location":"DIY/painting/#painting","title":"Painting","text":"<p>Im told that you should tape up anew for every coat but this sounds insane. Im prefer to tape up once but this requires extra time and care when remmoving it.</p> <p>Paint in a well venitlated room. If you dont have windows using a fan might be a good idea but it may mean paint dries faster also</p> <ul> <li>Tape up all straight edges (this takes a fair ammount of time)</li> <li>Put down covers </li> <li>Make sure paint is mixed well - be careful if shaking make sure the lid is on tight</li> <li>Cut in edges</li> <li>When rolling roll in all directions, not just up and down<ul> <li>Last time I rolled too close to the edge and painted over the tape and on to the ceiling \ud83d\ude2d</li> <li>One thing to try next time is using some card to guard against this but im not sure if thats a good idea or not yet...</li> </ul> </li> <li>leave to dry AT LEAST the recommended time for recoat, see tin<ul> <li>Use cling film to wrap up brushes and roller (and tray if lots of paint left)</li> </ul> </li> <li>Cut in edges again</li> <li>Roller paint the rest, again in all directions</li> <li>Leave to dry (honestly im not sure whether to let dry or remove tape at this stage...)<ul> <li>See tin but paint will need 24-48 to \"cure\". Im not sure when is okay to have a shower... We waited 24 hours... </li> </ul> </li> </ul>"},{"location":"DIY/painting/#finishing-up","title":"Finishing Up","text":"<ul> <li>Remove Tape<ul> <li>When removing tape be EXTREMELY careful and take your time, if you dont you can tear the fresh paint away</li> <li>Use the edge of a filling knife when pulling tape</li> <li>You can also use a stanley knife but its very difficult to get a straight line</li> </ul> </li> <li>Touch Ups, you can use a smaller art brush to get any missed bits or straighten up lines if you have a steady hand</li> <li>Any drips can normally be cleaned off of hard surfaces by scraping with a credit card gently</li> <li>Clean Brushes</li> <li>Water based can be done in the sink with running water<ul> <li>Oil based needs white spirit (or just bin the brush)</li> </ul> </li> </ul>"},{"location":"Docker/","title":"Docker","text":"<p>Make a container run and do nothign for troubleshooting <pre><code>docker run --rm --entrypoint=\"\" k3sm tail -f /dev/null\n</code></pre></p>"},{"location":"Docker/Centos/","title":"Centos (+ RedHat) Packaging","text":"<pre><code># install a package\nyum install -y kubectl-1.17.9\n\n# find a package\nyum list kubectl\nyum search \"some string to match in package details\"\n\n# list available package versions\nyum --showduplicates list kubectl\n</code></pre>"},{"location":"Helm/","title":"Helm","text":""},{"location":"Helm/#join-a-list","title":"Join a list","text":"<pre><code>{{/*\nJoin a list using \";\"\n*/}}\n{{- define \"my-chart.semicolonSeperatedList\" -}}\n{{- join \";\" .Values.someList | quote }}\n{{- end -}}\n</code></pre> <pre><code># values.yaml\nsomeList:\n  - foo\n  - bar\n  - baz\n\n# deployment.yaml\n\nenv:\n  - name: MY_VARIABLE\n    value: {{ template \"my-chart.semicolonSeperatedList\" . }}\n</code></pre>"},{"location":"Jenkins/","title":"Jenkins","text":""},{"location":"Jenkins/#useful-endpoints","title":"Useful Endpoints","text":"<p><code>http://your-jenkins/env-vars.html</code> shows you all the vars that will be available at build time</p>"},{"location":"Jenkins/#custom-trigger","title":"Custom Trigger","text":"<pre><code>import org.jenkinsci.plugins.pipeline.modeldefinition.Utils\n\n/*\nThis pipeline takes a github credential (Username/Token) and list of configuired projects \nas shown below. You can configure jenkins to trigger this pipeline only on each commit and \nallow it to trigger other jenkins jobs based on changes detected.\n\ntriggerJobsPipeline {\n    gitCredential = \"github-credential\"\n    jobs = [\n        'jenkins-job-1': [enabled: true, directory: \"src/path1/\"],\n        'jenkins-job-2': [enabled: false, directory: \"src/path2/\"],\n    ]\n}\n*/\n\ndef call(body) {\n    def params = [:]\n    body.resolveStrategy = Closure.DELEGATE_FIRST\n    body.delegate = params\n    body()\n\n    def myProjects = params.jobs\n    def myGitCredential = params.gitCredential\n    def THIS_COMMIT = \"\"\n\n    pipeline {\n        agent {\n            kubernetes {\n                inheritFrom 'base'\n            }\n        }\n\n        stages {\n            stage (\"trigger\") {\n                steps {\n                    // there is a bug in jenkins whereby the GIT_* env vars can be missing or incorrect\n                    // instead we will use git rev-parse\n                    script {\n                        THIS_COMMIT = sh(script: \"git rev-parse HEAD\", returnStdout: true).trim()\n                        echo \"rev-parse returned ${THIS_COMMIT}\"\n                    }\n\n                    echo \"\"\"\n                    THIS_COMMIT: ${THIS_COMMIT}\n                    BRANCH_NAME: ${env.BRANCH_NAME}\n                    \"\"\"\n\n                    // add target branch for comparison\n                    withCredentials([\n                        usernamePassword(credentialsId: myGitCredential, usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GIT_TOKEN')\n                    ]) {\n                        sh \"git config http.sslVerify false;\"\n                        sh \"git config url.\\\"https://api:${GIT_TOKEN}@git.domain.com\\\".insteadOf \\\"https://git.domain.com\\\"\"\n                        sh 'git config --add remote.origin.fetch +refs/heads/master:refs/remotes/origin/master'\n                        sh 'git fetch --no-tags'\n                    }\n\n                    script {\n                        // discover changed files\n                        def diffOutput\n                        if (env.BRANCH_NAME == 'master') {\n                            // for master detect change from previous commit\n                            diffOutput = sh(script: \"git diff --name-only HEAD~1...${THIS_COMMIT}\", returnStdout: true)\n                        } else {\n                            // for PRs use three-dot comparison, i.e. all files changed since branching\n                            diffOutput = sh(script: \"git diff --name-only origin/master...${THIS_COMMIT}\", returnStdout: true)\n                        }\n                        filesChanged = diffOutput.trim().split('\\n').collect { it.trim() }.findAll { it != '' }\n                        filesChanged.each{file -&gt;\n                            echo \"changed: ${file}\"\n                        }\n\n                        // trigger jobs according to changes\n                        myProjects.each{entry -&gt; \n                            def taskName = entry.key\n                            def taskDir = entry.value.directory\n                            def taskEnabled = entry.value.enabled\n                            def taskParams = entry.value.parameters ?: []\n\n\n                            if (directoryHasChanges(taskDir, filesChanged)) {\n                                echo \"changes found in ${taskDir}\"\n                                if (taskEnabled) {\n                                    build(\n                                        job: \"Builds/${taskName}/${env.BRANCH_NAME}\",\n                                        parameters: taskParams,\n                                        wait: false, \n                                        propagate: false\n                                    ) \n                                } else {\n                                    echo \"${taskName} is not yet enabled\"\n                                }\n                            } else {\n                                echo \"no changes found in ${taskDir}\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\ndef directoryHasChanges(String dir, ArrayList filesChanged) {\n    def result = false\n    filesChanged.each{file -&gt;\n        if (file.startsWith(dir)){\n            result = true\n        }\n    }\n    return result\n}\n</code></pre>"},{"location":"Kafka/","title":"README","text":""},{"location":"Kafka/#local-environment","title":"Local Environment","text":"<p>https://hub.docker.com/r/confluentinc/cp-kafka/</p> <pre><code># docker compose\nversion: \"3.7\"\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:5.3.1\n    hostname: zookeeper\n    container_name: zookeeper\n    ports:\n      - \"2181:2181\"\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n\n  broker:\n    image: confluentinc/cp-kafka:5.3.1\n    hostname: broker\n    container_name: broker\n    depends_on:\n      - zookeeper\n    ports:\n      - \"9092:9092\"\n      - \"29092:29092\"\n    logging: # comment this out to see noisey broker logs\n      driver: none\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      # See: https://www.confluent.co.uk/blog/kafka-listeners-explained/\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_LOCAL:PLAINTEXT,LISTENER_DOCKER:PLAINTEXT\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_LOCAL://localhost:9092,LISTENER_DOCKER://broker:29092\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_LOCAL\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_OFFSETS_TOPIC_NUM_PARTITION: 2\n      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0\n      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 0\n</code></pre>"},{"location":"Kafka/#command-line","title":"Command Line","text":"<pre><code># list commands\nls /usr/bin/kafka*\n\n# list topics \nkafka-topics --bootstrap-server localhost:9092 --describe\n\n# update topics\nkafka-topics --bootstrap-server localhost:9092 --alter --topic cmdb_export --partitions 2\n\n# view consumer group offset and lag\nkafka-consumer-groups --bootstrap-server localhost:9092 --all-topics --all-groups --describe\n\n# purge messages per partition (see https://www.baeldung.com/kafka-purge-topic)\necho -n '{\"partitions\": [{\"topic\": \"purge-scenario\",\"partition\": 1,\"offset\": -1}],\"version\": 1}' &gt; /tmp/purge.json\nkafka-delete-records --bootstrap-server localhost:9092 --offset-json-file /tmp/purge.json\n</code></pre>"},{"location":"Kerberos/Linux%20Setup/","title":"Linux Setup","text":""},{"location":"Kerberos/Linux%20Setup/#docker","title":"Docker","text":"<pre><code>FROM docker.artifactory.domain.com/centos:7.8.2003\nRUN yum install -y krb5-workstation\n</code></pre> <pre><code>#docker-compose\nMYService:\n  build:\n    context: ./MyService\n    dockerfile: Dockerfile\n  environment:\n    KRB5CCNAME: /tmp/mykrb5.ccache \n    KRB5_CONFIG: /mnt/krb5/krb5.conf \n    KRB5_TRACE: /dev/stderr # for debugging\n  volumes:\n    - type: bind\n      source: ./krb5\n      target: /etc/krb5\n      read_only: true\n</code></pre>"},{"location":"Kerberos/Linux%20Setup/#creating-keytabs","title":"Creating Keytabs","text":"<pre><code># first need to find the kvno\nprintf $MY_PASSWORD | kinit -c /tmp/temp_cache.ccache $MT_USERNAME@DOMAIN.COM \nKVNO_OUT=$(kvno -c /tmp/temp_cache.ccache krbtgt/DOMAIN.COM@DOMAIN.COM)\n# krbtgt/DOMAIN.COM@DOMAIN.COM: kvno = 3\n\nKVNO_VAL=$(echo $KVNO_OUT | sed 's/.*\\([[:digit:]]\\)$/\\1/g')\nrm /tmp/temp_cache.ccache\necho $KVNO_VAL\n\n# use ktutil to create the keytab\nprintf \"%s\\n\" \"add_entry -password -p $USERNAME@DOMAIN.COM -e aes256-cts-hmac-sha1-96 -k $KVNO_VAL\" \"$PASSWORD\" \"write_kt /tmp/something.kt\" \"quit\" | ktutil\n</code></pre>"},{"location":"Kerberos/Linux%20Setup/#check-keytabs","title":"Check Keytabs","text":"<pre><code># list principals from keytab\nklist -k -t &lt;keytab file name&gt;\n\n# verify keytab can authenticate\nkinit -c &lt;cache name&gt; -k -t &lt;keytab file name&gt; &lt;service principal name&gt;\n</code></pre>"},{"location":"Kerberos/Linux%20Setup/#spns","title":"SPNs","text":"<p>you must register every hostname involved! i.e. if you use a cname that points to a real hostname BOTH much be set on the account. </p> <p>This is because tickets are request by A record in some implementations. </p>"},{"location":"Kerberos/Linux%20Setup/#trace","title":"Trace","text":"<pre><code># this works in an asp.net app (helm)\n{{- if .Values.krb5.trace }}\n- name: KRB5_TRACE\n  value: /tmp/krb5_trace.log\n{{- end }}\n</code></pre>"},{"location":"Powershell/","title":"Powershell","text":"<p> GitHub </p>"},{"location":"Powershell/IP%20Address%20Comparison/","title":"IP Address Comparison","text":"<pre><code>#Define the Networks you wish to check\n$Networks = @(\n    '192.168.1.0/8'\n    '172.16.1.0/16'\n)\n\n#Create Objects for each network that define the IP range as a decimal\n$PossibleSubnets = $Networks | ForEach-Object {\n     $NetworkAddress = [IPAddress]($_ -split '/')[0]\n     $MaskLength = [Byte]($_ -split '/')[1]\n\n     $NetworkAddressBytes = $NetworkAddress.GetAddressBytes()\n     [Array]::Reverse($NetworkAddressBytes)\n     $RangeLower = [BitConverter]::ToUInt32($NetworkAddressBytes, 0)\n\n     $DecimalMask = [Convert]::ToUInt32((\"1\" * $MaskLength).PadRight(32, \"0\"), 2)\n     $RangeUpper = $RangeLower -bor -bnot $DecimalMask\n\n    [PSCustomObject]@{\n        Network = $_\n        NetworkAddress = $NetworkAddress\n        MaskLength = $MaskLength\n        RangeLower = $RangeLower\n        RangeUpper = $RangeUpper\n    }\n}\n\n\n'localhost' | ForEach-Object {\n    Write-Host \"Checking $_\" -ForegroundColor Yellow\n    $ComputerName = $_\n    $Interfaces = [Net.NetworkInformation.NetworkInterface]::GetAllNetworkInterfaces()\n    $Interfaces | ForEach-Object {\n        $Interface = $_\n        $IpAddresses =  $_.GetIPProperties().UnicastAddresses | Where-Object { $_.Address.ToString() -notin '127.0.0.1', '::1' } | Select-Object -ExpandProperty Address\n        $IPAddresses | ForEach-Object {\n            #Here we convert the IP addresses found to Decimal for comparison\n            $IPAddressBytes = $_.GetAddressBytes()\n            [Array]::Reverse($IPAddressBytes)\n            $DecimalIPAddress = [BitConverter]::ToUInt32($IPAddressBytes, 0)\n\n            $MySubnets = $PossibleSubnets| Where-Object {$DecimalIPAddress -ge $_.RangeLower -and $DecimalIPAddress -le $_.RangeUpper}\n\n            [PSCustomObject]@{\n                ComputerName = $ComputerName\n                Interface = $Interface.Name\n                Network = $MySubnets.Network\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Powershell/Linq%20in%20Powershell/","title":"Linq in Powershell","text":"<p>Notes on article: https://www.red-gate.com/simple-talk/sysadmin/powershell/high-performance-powershell-linq/</p> <p>Linq methods are static extension methods which, in powershell, are called as below</p> <pre><code>[ClassName]::MethodName(ObjectInstance, arguments...)\n</code></pre> <p>Delegates in linq are written as</p> <pre><code># var result = dates.Where(d =&gt; d.Year &gt; 2016);\n[Func[DateTime,bool]] $delegate = { param($d); return $d.Year -gt 2016 }\n[Linq.Enumerable]::Where($dates, $delegate)\n</code></pre>"},{"location":"Powershell/Linq%20in%20Powershell/#count","title":"Count","text":"<pre><code>[int[]] $numbers = @(3, 1, 4, 1, 5, 9, 2)\n[Linq.Enumerable]::Count($numbers) # 7\n[Linq.Enumerable]::Count($numbers, [Func[int,bool]] { $args[0] -gt 2 }) # 4\n</code></pre>"},{"location":"Powershell/Linq%20in%20Powershell/#firstordefault","title":"FirstOrDefault","text":"<pre><code>[int[]] $numbers = @(2, 0, 5, -11, 29)\n[Linq.Enumerable]::FirstOrDefault($numbers) # 2\n\n$delegate = [Func[int,bool]] { $args[0] -gt 100 }\n[Linq.Enumerable]::First($numbers, $delegate) # 0\n</code></pre>"},{"location":"Powershell/Linq%20in%20Powershell/#select","title":"Select","text":"<pre><code>[DateTime[]]$dates = \n    (Get-Date -Year 2017 -Month 10 -Day 23),\n    (Get-Date -Year 2013 -Month 12 -Day 3),\n    (Get-Date -Year 2016 -Month 2 -Day 13)\n\n[Linq.Enumerable]::Select($dates, [Func[DateTime,int]] { $args[0].DayOfYear})\n296\n337\n44\n</code></pre>"},{"location":"Powershell/TODO/","title":"TODO","text":"<p>Quick little snippet I use for debugging modules\ufffd. If you run Get-Module  and pipe to get-member, it contains a Invoke method. <p>Calling this method it will invoke a script block against the Modules scope.</p> <p>This gets a bit funky, when you use $host.EnterNestedPrompt(). </p> <p>Run the below on an imported module, and you'll enter the running scope of that module. </p> <p>PS &gt; &amp; (Get-Module MachineDB) { $host.EnterNestedPrompt() }</p> <p>This allows you to access private functions and variables. </p> <pre><code>Add-Type -AssemblyName System.Windows.Forms\n\n$Label = New-Object -TypeName System.Windows.Forms.Label\n$Label.Text = \"This is a Sample Form\"\n$Label.AutoSize = $true\n$Label.BackColor = [System.Drawing.Color]::Transparent\n\n$Font = New-Object System.Drawing.Font(\"Time New Roman\",18,[System.Drawing.FontStyle]::Bold)\n\n$Image = [System.Drawing.Image]::FromFile(\"C:\\Users\\Scott\\Desktop\\EmmaStone.jpg\")\n\n$Button = New-Object -TypeName System.Windows.Forms.Button\n$Button.Location = New-Object -TypeName System.Drawing.Size(70,70)\n$Button.Size = New-Object -TypeName System.Drawing.Size(75,23)\n\n$Button.Name = \"Button1\"\n$Button.Text = \"Fit\"\n\n$Form = New-Object -TypeName System.Windows.Forms.Form\n$Form.Text = \"Sample Form\"\n#$Form.AutoSize = $true\n#$Form.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowOnly\n$Form.MinimizeBox = $false\n$Form.MaximizeBox = $false\n$Form.ShowInTaskbar = $true\n$form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen\n#$Form.BackColor = [System.Drawing.Color]::FromARGB(51,102,255)\n\n$Form.Controls.Add($Label)\n$Form.Controls.Add($Button)\n$Form.Font = $Font\n$Form.BackgroundImage = $Image\n$Form.BackgroundImageLayout = [System.Windows.Forms.ImageLayout]::None\n$Form.Width = $Image.Width\n$Form.Height = $Image.Height\n$Form.ShowDialog() | Out-Null\n</code></pre>"},{"location":"Powershell/Using/","title":"Using","text":"<pre><code># one way to overcome double hop\n$Cred = Get-Credential\nInvoke-Command -ComputerName vipwds1 -Credential $cred -ScriptBlock {\n    Invoke-Command -ComputerName gspwds1 -Credential $using:Cred -ScriptBlock {\n        $env:Computername\n    }\n}\n</code></pre>"},{"location":"Powershell/encoding/","title":"Encoding","text":""},{"location":"Powershell/encoding/#unicode-ascii","title":"Unicode &amp; ASCII:","text":"<p>Both are \"standards\" for encoding and representing text. ASCII is older and small using 8 bits whilst unicode uses up to 32 bits and is widely adopted. Unicode also has codepoints for emojis which is why we need to know this</p> <p>The below are all \"implementations\" of unicode:</p> <ul> <li>UTF-8: uses variable size (1-4 bytes) to encode. Since ASCII is 1 byte anything ASCII test is automatically UTF-8 also</li> <li>UTF-16: uses exactly 2 bytes and so is unable to express some characters</li> <li>UTF-32: uses exactly 4 bytes and so is much larger than UTF-8 and not widely used</li> </ul> <p>To use emojis you need only know the codepoint for it which is expressed as U+ and some hex value. (see: https://unicode-table.com/en/sets/faces/)</p> <p>\ud83d\udd25 == U+1F525 </p> <p>\ud83d\udca9 == U+1F4A9</p> <pre><code># OPTION 1 - the official and easy way to display a unicode character is\n\"`u{1F4A9}\"\n\n# OPTION 2 - another way is to use [char]\n[char]::ConvertFromUtf32(0x1F4A9)\n\n# technically ConvertFromUtf32() takes an int32 as an argument. this is where powershell has automatically converted hex to int32 for us\n$emojiInt = [int]0x1F4A9 # 128169\n[char]::ConvertFromUtf32($emojiInt)\n\n&lt;#\n    .NOTES\n    seeing utf32 above confused me initially since powershell uses UTF-8.\n    But remeber UTF-8 is \"variable\" so in this we are converting from 0x1F4A9 which is 3 bytes.\n    This also explains why we dont see a ConvertFromUtf8() method becuase it would needlessly limit us \n#&gt;\n\n# when used a type accelerator [char] can display a character encoded as a single byte. aka ASCII or UTF-8 (but not all of it, againm its variable)\n[char]0x21 # hex for '!'\n[char]33 # byte for '!'\n[char]\"!\" # string for '!'\n[char]0x21 -eq [char]33 -eq \"!\" # True\n\n# OPTION 3 - for completeness\n[System.Text.Encoding]::UTF32.GetString([System.BitConverter]::GetBytes(0x1F4A9))\n</code></pre>"},{"location":"Powershell/encoding/#converting-from-hex","title":"Converting from Hex","text":"<pre><code>$hex = 0x1F4A9\n\n[int]$hex # integer\n[System.BitConverter]::GetBytes($hex) # bytes\n[byte]0xFF # can only convert single byte this way\n</code></pre>"},{"location":"Powershell/encoding/#converting-from-bytes","title":"Converting from Bytes","text":"<pre><code>$bytes = 169, 244, 1, 0\n\n# beware endianess hwne converting to hex\n$convertedHex = [System.BitConverter]::ToString($bytes)\nif ([System.BitConverter]::IsLittleEndian) {\n    [Array]::Reverse($convertedHex)\n}\n</code></pre>"},{"location":"Prometheus/notes/","title":"Prometheus Notes","text":""},{"location":"Prometheus/notes/#useful-to-troubleshoot","title":"Useful to troubleshoot","text":"<pre><code>// check is a scrape was successful (1) or failed (0)\nup{k8s.namespace.name=\"foo\",service=\"bar\"}\n\n// how long a scrape took\nscrape_duration_seconds{job=\"foo\"}\n\n// how many metrics a scrape recorded\nscrape_samples_scraped{job=\"foo\"}\n</code></pre>"},{"location":"Prometheus/notes/#federate-data","title":"Federate Data","text":"<pre><code>/federate?match[]={__name__!=\"\"}\n</code></pre> <pre><code>honor_labels: true\nhonor_timestamps: true\nparams:\n  match[]:\n  - '{__name__!=\"\"}'\nscrape_interval: 1m\nscrape_timeout: 10s\nmetrics_path: /federate\nscheme: http\nstatic_configs:\n- targets:\n  - my-prometheus.com\n</code></pre> <pre><code>- record: http_requests:rate\n  expr: sum by (service, code) (rate(http_request_duration_seconds_count[5m]))\n\n- alert: HttpErrorCodeSLI\n  expr: http_requests:rate{code=~\"5..\"} &gt; 0\n  for: 15m\n  labels:\n    severity: page\n    applications: awacs\n  annotations:\n    summary: http error codes 5xx have been recorded for the past 15 minutes\n</code></pre>"},{"location":"Prometheus/notes/#calculating-ratios","title":"Calculating Ratios","text":"<p>https://www.robustperception.io/using-group_left-to-calculate-label-proportions</p> <pre><code>cache_usage{event=\"HIT\", source=\"ISomeClass\"} 2868\ncache_usage{event=\"MISS\", source=\"ISomeClass\"} 3036\ncache_usage{event=\"REQUESTED\", source=\"ISomeClass\"} 5904\n</code></pre> <pre><code># ratio of cache hit to miss\ncache_usage{event=~\"HIT|MISS\",  source=\"IClassifyServiceClient\"} / \nignoring(event) group_left sum without (event) (cache_usage{event=\"REQUESTED\",source=\"IClassifyServiceClient\"})\n</code></pre>"},{"location":"Python/Classes/","title":"Classes","text":"<pre><code>import random\n\nwildpokemon = ['zubat','vulpix','staryu','sandshrew']\n\nclass Pokemon: # class names use CapWords\n    population = 151 # static variable relating to the class itself not the instance\n\n    def __init__(self, name, lvl) : # constructor\n        self.name = name # setup the object variables\n        self.lvl = lvl\n        self.__hp_multiplier = 50 # __ convention for class private variables of methods\n        self.__calculate_stats()\n\n    def __calculate_stats(self) :\n        self.hp = self.lvl * self.__hp_multiplier\n        self.atttack = self.lvl * 2\n        self.defence = self.lvl * 1.5\n\n    def attack(self):\n        pass\n\nclass WildPokemon(Pokemon):\n    def __init__(self):\n        self.name = wildpokemon[random.randint(0,3)]\n        self.lvl = random.randint(5,15)\n        super().__init__(self, self.name, self.lvl) # inherit, could also use Pokemon.__init__()\n\np = Pokemon()\nprint('a wild', p.name, 'has appeared!')\nprint('Level:',p.lvl)\n</code></pre>"},{"location":"Python/Classes/#inheritance","title":"Inheritance","text":"<pre><code>import random\n\nwildpokemon = ['zubat','vulpix','staryu','sandshrew']\nledgpokemon = ['articuno','zapdos','moltres','mewtwo']\n\nclass Pokemon(object) :\n    def __init__(self,xHP,xAtk,xDef) :\n        self.name = 'missingno'\n        self.lvl = 0\n        self.xHP = xHP\n        self.xAtk = xAtk\n        self.xDef = xDef\n    def calcHP(self) :\n        return self.lvl * self.xHP\n    def calcAtk(self) :\n        return self.lvl * self.xAtk\n    def calcDef(self) :\n        return self.lvl * self.xDef\n\nclass WildPokemon(Pokemon) :\n    def __init__(self) :\n        super(WildPokemon,self).__init__(50,2,1)\n        self.name = wildpokemon[random.randint(0,3)]\n        self.lvl = random.randint(5,15)\n\nclass LedgPokemon(Pokemon) :\n    def __init__(self) :\n        super(LedgPokemon,self).__init__(100,5,4)\n        self.name = ledgpokemon[random.randint(0,3)]\n        self.lvl = random.randint(75,90)\n\n\n\np = LedgPokemon()\nprint('a wild', p.name, 'has appeared!')\nprint('Level:',p.lvl)\nprint('HP:',p.calcHP())\nprint('Atk:',p.calcAtk())\nprint('Def:',p.calcDef())\n</code></pre>"},{"location":"Python/Classes/#special-methods","title":"Special Methods","text":"<pre><code>\"\"\"\nspecial methods\n\"\"\"\nclass SpecialMethods():\n    def __bool__(self):\n        pass # dictate truthyness\n    def __str__(self):\n        pass # return human readable string representation\n    def __repr__(self):\n        pass # return string that could be used to create that instance. eg \"Pokemon(x, y)\"\n    def __len__(self):\n        pass # return a size for the class\n    def __hash__(self):\n        pass # return suitable dict or set\n    def __add__(self, value):\n        pass\n    def __sub__(self, value):\n        pass\n    def __eq__(self, value):\n        pass # or ge, lt\n\n\"\"\"\ndecorater\n\"\"\"\nclass Protected:\n    def __init__(self):\n        self.__size = 30 # these is protected\n        self.__password = 1234\n\n    @property # now we designate this a property users can mess with\n    def size(self):\n        return self.__size\n\n    @size.setter # this allows users to update the property in a prescribed way\n    def size(self, value):\n        self.__size = value\n\n    @property # becuase there is no setter we block users form updating the value\n    def password(self):\n        return self.__password\n\n    @staticmethod\n    def meth1(self):\n        pass\n\n    @classmethod\n    def meth2(self):\n        pass\n</code></pre>"},{"location":"Python/Common%20Types/","title":"Common Types","text":"<pre><code>type(var) # find type\nint('999') # explicitly convert types\nint('0xFF', 16) # fun with hex, comes out as 255 as an int\n\n# when using mutable objects like lists \nlist1 = list2 # these are both refs to the same object in memory which may be bad\nlist2 = list1[:] # copies all element but if an element is another list we have just moved the problem\nlist2 = copy.deepcopy(list1) # copy the whole structure as a new object in memory\n\nhasattr('hello', '__str__') # test to see if object has method/variable\nisinstance('hello', str) # is it of type string, also check inheritance\nissubclass('hello', object) # is it a subclass of\n</code></pre>"},{"location":"Python/Common%20Types/#list","title":"List","text":"<pre><code># Collection of objects, you can add or remove elements of a list (Mutable)\nmy_list = ['one', 'two', 'three'] # define a list\nmy_list[x] # get xth index element\nmy_list[x:y] # get a slice of list from x up to y (not inv y)\ndel my_list[3] # remove the third element fom the list\n'one' in my_list # returns true if element is in list\n'one' not in my_list # returns true is NOT in list\nnum1, num2, num3 = my_list # assign each of the variables to each element of list in order\nmy_list.index('two') # find what index a given element is.\nmy_list.appened('four') # add element at the end\nmy_list.insert(1,'onepointfive') # add element at specified index\n\nmy_list = [2, 3]\nmy_list[:0] = [1] # adds to the begining of a list but only iterable objects\nmy_list.extend([4]) # same but at the end\nmy_list.sort(reverse=True) # sort\ntuple(list) # convert list to tuple\nmy_list = copy.copy(list) # use copy module to make a new list object instead list1 referencing the same underlying object as list\nmy_list = copy.deepcopy(list) # use of the list you wish to copy contains lists\n\n# rmeove elems\nmy_list.pop(n) # removeby index\nmy_list.remove('blue') # rmeove by value\n\nmy_list.sort() # in memory sort\nsorted(my_list) # create new sorted object\nsorted(my_list, key=len) # sorts by apply the function len, i.e. size. or str.lower by lowcase etc. \n\nzip(my_list, my_other_list) # interlace two lists, returns a list of tuples. \n\n# filtering\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\n\n[i for i in list1 if not i%2] # list comprehension\n['even' if not i%2 else 'odd' for i in list1]\n\n(x for x in list1 if x &gt; 6) # generator (lazy evaluated)\n\nfilter(fulfills_some_condition, lst) \n\n# find first occurence\nnext(x for x in lst if ...)\nnext((x for x in lst if ...), [default value])\nfirst_or_default = next((x for x in lst if ...), None)\n</code></pre>"},{"location":"Python/Common%20Types/#tuple","title":"Tuple","text":"<pre><code># Collection of objects, you cannot add or remove elements of a tuple (Immutable)\nt1 = (1,2,3)\nlist(t1) # convert tuple to list\n\n\"\"\"\nDictionary\n\"\"\"\n# Collection of Key-Vale pairs, equivalent to a powershell hashtable\nd1 = {'k1': 1, 'k2': 2}\nd1.keys() # list of all keys\nd1.values() # list of all values\nd1.items() # returns a list of each key-value pair. each item is returned as a list\nd1.get('k1','?') # get value of key, or return '?' is key not found\nd1.setdefault('k1',0) # add element with default value if not already present, ignored if is present\n\nd2 = {'k1': 99, 'k3':99}\nd1.update(d2) # updates the dict. updates values if key already present and add new keys\n# Frozen Dict is an immutable version of dict if required\n\ndict(zip(l1, l2)) # can make a dict from twolists by first zippig them\n\n# unpacking\nmy_list = [1 , 2 , 3 , 4]\nx, y, *z = my_list # gives 1 2 [3, 4]\n\n# comprehension\nnumbers = ['zero','wun','two','tree','fower','fife','six','seven','ait','niner']\ncodes = {str(i):name for i,name in enumerate(numbers)}  # result dict with ints as keys and number in list as value\n\n{k:v for k,*v in ('key', 'val1','val2')} # nice syntactically. makes dict with value a list of val1 and val2 courtesy of packing *v\n</code></pre>"},{"location":"Python/Common%20Types/#string","title":"String","text":"<pre><code>str = 'Hello Wolrd'\n\nstr[1:7] # selct chars from 1 - 6\nstr[10::-1] # seect chars starting form ten but stepping -1 (ie. rveser from char 10)\nstr.upper() # uppercase the string\nstr.islower() # check all chars lowercase\nstr.isX() # lots of different checks, alpha,num,decimal,title etc\nstr.startswith()\n', '.join(list) # join a list int a string using the spacer ', '\nstr.rjust(width, fillchar) # eg: *********str. can also ljust and center\nstr.strip() # remove whitespace from left and right. can also rstrip &amp; lstrip\nstr = \"hello\" + \"world\" # concat string\nstr = \"Hello {0}\".format('World') # add words to strings using format()\nstr = \"{h}, {w}\".format(h='Hello', w='World') # add words by variable for more complex strings\n\nprint(\"hello\\nworld\") # unicode so newline is added\nprint(r\"hello\\nworld\") # raw string so special chars ignored\n\nvals = ['foo', 'bar'] # new in 3.6\nf'value is {vals[0]}' # powershell like string sub\nchr(0x03B1) # to display special characters\nu'\\u03B1' # spciel chars by two-byte unicode\n'\\u03B1' # works too?\n\n# Here-String (Multi-line string)\nherestring = \"\"\"\n    some string\n\"\"\"\n</code></pre>"},{"location":"Python/Common%20Types/#sets","title":"Sets","text":"<pre><code>s1 = {'foo','bar'} # in sets elements must be unique and are unordered\ns2 = {'foo', 'bar', 'foo'} # will become {'foo', 'bar'}\ns1 == s2 # will be true becuase duplicate value got scrubbed\n\ns1.intersection(s2) # find the intersection of sets (think Venn diagram)\ns1 &amp; s2 # same but with operator\n\ns1.union(s2) # find the union. \ns1 | s2 # same butwith operator\n\ns1.difference(s2) # items s1 but not in s2\ns1 - s2  \n\ns1.symmetric_difference(s2) # items only in one set. Opposite of intersection\ns1 ^ s2\n\nlist(set(l1)) # way of getting only unique values in a list\n\n#set comprehension\nsentence = 'The quick brown fox jumps over the lazy dog.'\nletters = { char.lower() for char in sentence if char.isalpha() } # get all unique alphabetic letters in string\n</code></pre>"},{"location":"Python/Error%20Handling/","title":"Error Handling","text":"<pre><code>import os\nimport sys\nimport traceback\nimport warnings\n\n# write errors to stderr\nif some_error:\n    sys.stderr.write(\"som error message\")\n    print(\"another way of writing error\", file=sys.stderr)\n    exit(1)\n\n# write warnings\nwarnings.warn('bad bad bad')\n\n# To catch an exception\ntry :\n    5 // 0\nexcept Exception as err : # Exception is the base of all error type, as err stores the error message in variable 'err'\n    print(err)\n\n# To Catch Specific exception\ntry :\n    5 // 0 \nexcept ZeroDivisionError as err : # Catch a specific type of error\n    print('Did you try to divide by 0?')\n\n# Raise your own error\ntry :\n    if (os.path.exists('C:\\\\SomeFakeFile.txt')) :\n        print('found you file')\n    else :\n        raise FileNotFoundError('Wheres that file?') # raise is like throw\nexcept FileNotFoundError as fnfe:\n    print(\"where dat file at? its certainly not at {0}\".format(fnfe.filename))\nexcept Exception as e :\n    print(e)\n    sys.exit(e.args[0]) # exit with correct return code\nfinally: \n    pass # do some other stuff\n\n# Assert \n# You should not handle asserts with try try,except. If an assert fails you should fail the program\nassert all([0,1,2,3]) # would raise becuase 0 is False\n\nclass MyError(Exception):\n    pass\n</code></pre>"},{"location":"Python/Flow%20Control/","title":"Flow Control","text":"<pre><code>\"\"\"\nif statement\n\"\"\"\nif 1 &lt; 2 :\n    print(\"this\")\nelif 2 &gt; 3 :\n    print(\"that\")\nelse :\n    print(\"those\")\n\n# boolean operators\na = 999\nb = 999\na == b # True becuase values are the samer\na is b # False becuase they are different object (different ids) id(a)\na != b # False becuase they are the same, also can have &lt;, &lt;=, &gt;, &gt;=\n\nbool(0) # False, also {}, [], (), None are False\nbool(1) # True\nall([1,2,3]) # True becuase ach element is true\nall([0, 1, 2]) # False becuase 0 is false\nany([0, 1]) # True becuase at least one item has a boolean true value\n\n\"\"\"\nwhile loop\n\"\"\"\nmyl = [1, 2, 3, 4]\nwhile myl:\n    print(myl.pop(0) * 2) # pop(0) removes elemtns from list. could also be pop() which goes reverse\n\ni = 1\nj = 120\nwhile i &lt; 42:\n    if i == 2:\n        pass # emtpy placeholder\n    if i == 3:\n        continue # perform next iteration\n    if i == 4:\n        break # break out of the loop completely\nelse:\n    print(\"loop expired\")\n\n\n\"\"\"\nfor loop\n\"\"\"\nfor i in range(0, 10):\n    print(i)\n\nmy_dict = {'hello': 1, 'world': 2}\nfor k,v in my_dict.items():\n    print(\"Key is {0}, Value is {1}\".format(k,v))\n\nenumerate() # can be used to make things enumerable by returing (n, val) for each in collection\n\n\n\"\"\"\nwith\n\"\"\"\n# when using with, a context manager, you dont need to close(). \nwith open('fole.txt') as ifile:\n    for line in ifile:\n        print(line)\n</code></pre>"},{"location":"Python/Functions/","title":"Functions","text":"<pre><code># basic syntax\ndef func1(x,y) :\n    print(\"Inputs were {0} &amp; {1}\".format(x,y))\n\n# example of mixing positional and named params and default values\ndef func2(x, y, *, z=''): \n    # anything after the * is treated as a named param only\n    print()\n\n# PACKING multiple inputs (not unpacking)\n# in this case the SEPERATE args 1, 2 and 3 are packed up into a tuple\ndef func3(*args):\n    print(args)\n\nfunc3(1,2,3)\n\n# PACKING of key-value args (not unpacking)\n# in this case the three names params given are packed into a dict\ndef func4(**kwargs):\n    print(kwargs)\n\nfunc4(col='red', width=20, height=20)\n\n# UNPACKING of args into a function call\ndef func5(a, b, c):\n    print(c, b, a)\n\nargs = (1, 2, 3)\nfunc5(*args)\n\n\n# UNPACKING of key-value args into a function call\ndef func6(width, height, col):\n    print(width, height, col)\n\nkwargs = {'col':'red', 'width':20, 'height':30}\nfunc6(**kwargs) # this unpacks the dict into seperat artgs\n</code></pre>"},{"location":"Python/Functions/#scope","title":"Scope","text":"<pre><code># functions are not scoped like in powershell\ndef multi(x):\n    x *= 4\n\nint1 = 4 # int is immutable so will not ber changed outsie of the func\nmulti(int1)\nprint(int1)\n\nlis1 = [3, 2] # list is mutabel so the object in memory is altered resulting in the object outside the function changing\nmulti(lis1)\nprint(lis1)\n\n# withing a function you can choose which scope variabel you want to trget \nglobal my_var # target the global my_var\nnonlocal my_var # target the my_var in above scope (i.e. one level up)\n</code></pre>"},{"location":"Python/Functions/#lambda","title":"Lambda","text":"<pre><code># annonomous function object\n\n#sort\nfruit = ['apple','bannana','orange']\nfruit.sort(key=lambda x: x[1:]) #can be used to do complicated sorts\n\ndef all_but_first (x): # this is the equiv.\n    return x[1:]\n\n# map\nlist1 = [1,2,3,4,5,6,7,8]\n# lambda will apply modulo 2 to each element\n# map applies lambda to list 1 which returns a map obect\n# list ocnvert bac to list for us\n# the result is we have applied a function to every element in list \nlist(map(lambda x: x%2, list1))\n\nnew_list = [] # equiv to above\nfor i in list1:\n    new_list.append(i % 2)\nlist1 = new_list\n\n# filter\nitems = \\\n  ['elephant', 'telescope', 'plinth', \n   'mouse', 'tripod', 'aardvark' ]\n\nresult1 = list(filter(lambda i: 'e' in i, items))\nprint(result1)\n\nresult2 = []   # equiv to above\nfor i in items:\n    if 'e' in i:\n        result2.append(i)\nprint(result2)\n\nresult3 = [ i for i in items if 'e' in i ] # equiv to above, this is more pythonic\nprint(result3)\n</code></pre>"},{"location":"Python/Functions/#generator","title":"Generator","text":"<pre><code># these are much more efficient becuase when returnd the list isnt created which may take up lots of memory\n# you can iterate over this or just use list() to build a list when its needed. \ndef frange(start, stop, step=.25):\n    curr = float(start)\n    while curr &lt; stop and step &gt; 0:\n        yield curr\n        curr += step\n\nvals = [\n    (1.1, 3),\n    (1, 3, 0.33),\n    (1, 3, 1),\n    (3, 1),\n    (1, 3, 0),\n    (-1, -0.5, 0.1)\n]\n\nranges = list(map(lambda x: list(frange(*x)), vals)) # funky way of calling same function with many different args\nfor r in ranges:\n    print(r)\n</code></pre>"},{"location":"Python/Modules/","title":"Modules","text":"<pre><code>import sys \n\n\"\"\"\nThis is the description for the module\n\"\"\"\ndef func():\n    \"\"\"\n    This is a doc string for function\n    \"\"\"\nhelp(sys) # retreive descriptions and list of functions\nhelp(func) # retreive doc strings for module\n\n# Convention to run as a script but also be importable as a module safely\ndef main():\n    pass # do something\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"Rust/ESP32/","title":"Getting Started with ESP32","text":""},{"location":"Rust/ESP32/#installation","title":"Installation","text":"<ul> <li>install git for windows</li> <li>install rustup https://rustup.rs/ and switch to nightly toolchain</li> </ul> <pre><code>rustup default nightly\n</code></pre> <ul> <li>install VS 2022 Community w/ Desktop C++ workload</li> <li>download xtensa toolchain and put in PATH </li> <li>install esp-idf</li> <li>clone esp-rs/rust-build install esp toolchain</li> </ul> <pre><code>. ./Install-RustToolchain.ps1\nrustup toolchain list\n# esp should be listed\n</code></pre> <ul> <li>install build tools</li> </ul> <pre><code>\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\ncargo install ldproxy\ncargo install espflash --version 1.5.1\ncargo install espmonitor\n</code></pre>"},{"location":"Rust/ESP32/#environment","title":"Environment","text":"<p>To compile using the esp fork you will need to setup your shell with various variables</p> <pre><code># open cmd.exe\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n\npowershell\n. C:\\Users\\scott\\esp\\esp-idf\\export.ps1\n$env:PATH=\"C:\\Users\\scott\\.espressif\\python_env\\idf4.4_py3.8_env\\Scripts;$env:PATH\"\n\n# these vars were generate from running Install-RustToolchain.ps1 -InstallationMode export\n$env:PATH=\"C:\\Users\\scott/.espressif/tools/xtensa-esp32-elf-clang/esp-14.0.0-20220415-x86_64-pc-windows-msvc/bin/;$env:PATH\"\n$env:LIBCLANG_PATH=\"C:\\Users\\scott/.espressif/tools/xtensa-esp32-elf-clang/esp-14.0.0-20220415-x86_64-pc-windows-msvc/bin/libclang.dll\"\n$env:PIP_USER=\"no\"\n</code></pre>"},{"location":"Rust/ESP32/#repos","title":"Repos","text":"<ul> <li>espressif/esp-idf is the esp development framework</li> <li>esp-rs/rust a fork of the rust compiler with xtensa support</li> <li>esp-rs/rust-build Releases and install scripts for the esp fork</li> </ul>"},{"location":"Rust/ESP32/#creating-a-new-project","title":"Creating a new project","text":"<ul> <li> <p>use cargo generate to template a new project <pre><code>cargo generate --git https://github.com/esp-rs/esp-idf-template cargo\n</code></pre></p> </li> <li> <p>add the following to <code>.cargo/config.toml</code> to avoid <pre><code>[env]\n...\nESP_IDF_TOOLS_INSTALL_DIR = { value = \"global\" } # Use the esp-idf dir at ~/.espressif\n</code></pre></p> </li> <li> <p>suggested dependencies <pre><code>[dependencies]\nesp-idf-sys = { version = \"0.31.6\", features = [\"binstart\"] }\nesp-idf-svc = { version = \"0.42\", features = [\"experimental\", \"alloc\"] }\nembedded-svc = \"0.22\"\nlog = \"0.4\"\nesp_idf_logger = \"0.1.1\"\n</code></pre></p> </li> </ul>"},{"location":"Rust/error-handling/","title":"Error Handling","text":"<p>One approch is to allow any type of <code>Error</code></p> <pre><code>fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let some_var = env::var(\"SOME_ENV_VAR\")?;\n} \n</code></pre> <p>Or you can define all possible erros your application could encounter</p> <pre><code>#[derive(Debug)]\nenum AppError {\n    MissingEnvVar(String),\n    // etc\n}\n\nimpl std::error::Error for AppError {}\n\nimpl Display for AppError {\n    fn fmt(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; std::fmt::Result {\n        match self {\n            AppError::MissingEnvVar(name) =&gt; write!(f, \"Missing environment variable '{}'!\", name)\n        }\n    }\n}\n\n// note that errors returned from main will use Debug to print output, not Display\nfn main() -&gt; Result&lt;(), AppError&gt; {\n    let some_var = env::var(\"SOME_ENV_VAR\")\n        .map_err(|e| AppError::MissingEnvVar(\"SOME_ENV_VAR\".to_string()))?;\n}\n</code></pre> <p>Or for nicer output use <code>color_eyre</code></p> <p><pre><code>fn main() -&gt; color_eyre::Result&lt;()&gt; {\n    color_eyre::install()?;\n    let some_var = env::var(\"SOME_ENV_VAR\")\n        .map_err(|e| AppError::MissingEnvVar(\"SOME_ENV_VAR\".to_string()))?;\n}\n</code></pre> <pre><code>Error: \n   0: Missing environment variable 'SOME_ENV_VAR'!\n\nLocation:\n   src/main.rs:27\n\n  \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                                \u22ee 5 frames hidden \u22ee                 \n</code></pre></p>"},{"location":"Rust/libs/","title":"Useful Libs","text":"<ul> <li><code>nom</code> for parsing text</li> <li><code>camino</code> for dealing with Utf Paths (<code>Utf8PathBuf</code>)</li> <li><code>indexmap</code> for HashMap with preserved ordering</li> <li><code>id_tree</code> for tree structures</li> <li><code>color_eyre</code> for nicer error handling</li> </ul> <pre><code>fn main() -&gt; color_eyre::Result&lt;()&gt;  {\n    color_eyre::install().unwrap();\n    do_something()? // shortcuts to error result\n    Ok(())\n}\n</code></pre>"},{"location":"Rust/low-level-fun/","title":"Low Level Fun","text":""},{"location":"Rust/low-level-fun/#prooving-that-str-points-to-the-program-itself","title":"Prooving that &amp;str points to the program itself","text":"<p>For a while I couldnt understand why <code>String::from(\"foo\")</code> was a reference and how this worked  and also just assumed that meant it must be allocated on the heap but I didnt understand fully, so I had a poke around</p> <pre><code>fn main() {\n        stringy();\n}\n\nfn stringy() {\n        let a = String::from(\"foo\");\n        let b = String::from(\"bar\");\n        nothing()\n}\n\nfn nothing(){\n        // this is just useful to see in assembly as a marker\n        let a = 0;\n}\n</code></pre> <p>Running this with a break point on <code>nothing()</code> we can start exploring in GDB (comments added)</p> <pre><code>disas\nDump of assembler code for function rust_basics::stringy:\n# decrement the stack pointer for two 32bit refs and 8 bits for ... something ese im not sure\n   0x000055555555d410 &lt;+0&gt;: sub    $0x48,%rsp # 72 bits allocated on stack\n# load effective addresss from 0x36c4e(%rip) which is a certain ofset from the instruction pointer, clever!\n=&gt; 0x000055555555d414 &lt;+4&gt;: lea    0x36c4e(%rip),%rsi        # 0x555555594069\n   0x000055555555d41b &lt;+11&gt;:    lea    0x8(%rsp),%rdi\n   0x000055555555d420 &lt;+16&gt;:    mov    $0x3,%edx\n   0x000055555555d425 &lt;+21&gt;:    mov    %rdx,(%rsp)\n   0x000055555555d429 &lt;+25&gt;:    callq  0x55555555c780 &lt;&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from&gt;\n   0x000055555555d42e &lt;+30&gt;:    mov    (%rsp),%rdx\n   0x000055555555d432 &lt;+34&gt;:    lea    0x36c33(%rip),%rsi        # 0x55555559406c\n   0x000055555555d439 &lt;+41&gt;:    lea    0x20(%rsp),%rdi\n   0x000055555555d43e &lt;+46&gt;:    callq  0x55555555c780 &lt;&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from&gt;\n   0x000055555555d443 &lt;+51&gt;:    jmp    0x55555555d461 &lt;rust_basics::stringy+81&gt;\n   0x000055555555d445 &lt;+53&gt;:    lea    0x8(%rsp),%rdi\n   0x000055555555d44a &lt;+58&gt;:    callq  0x55555555c870 &lt;core::ptr::drop_in_place&lt;alloc::string::String&gt;&gt;\n   0x000055555555d44f &lt;+63&gt;:    jmp    0x55555555d4aa &lt;rust_basics::stringy+154&gt;\n   0x000055555555d451 &lt;+65&gt;:    mov    %rax,%rcx\n   0x000055555555d454 &lt;+68&gt;:    mov    %edx,%eax\n   0x000055555555d456 &lt;+70&gt;:    mov    %rcx,0x38(%rsp)\n   0x000055555555d45b &lt;+75&gt;:    mov    %eax,0x40(%rsp)\n   0x000055555555d45f &lt;+79&gt;:    jmp    0x55555555d445 &lt;rust_basics::stringy+53&gt;\n# this is our nothing fn so we can ignore everything else as runtime stuff\n   0x000055555555d461 &lt;+81&gt;:    callq  0x55555555d4c0 &lt;rust_basics::nothing&gt;\n&lt;omitted&gt;  \nEnd of assembler dump.\n</code></pre> <p>So we see two <code>lea</code> instructions pointing at locations of memory that are within the actual program itself.</p> <pre><code># examine 3 bytes from given address, this looks like it could be foo\nx/3x 0x555555594069\n0x555555594069: 0x66    0x6f    0x6f\n\n# examine 3 chars from addr\nx/3c 0x555555594069\n0x555555594069: 102 'f' 111 'o' 111 'o'\n\ninterestingly foo and bar are right next to each other here...\nI had expected something else like there to be some valid instructions in between so rust must be seperating instructions from string literals when compiling\nx/6c 0x555555594069\n0x555555594069: 102 'f' 111 'o' 111 'o' 98 'b'  97 'a'  114 'r'\n</code></pre> <p>TODO : So now I want to understand two more things. How data is stored in the output binary and what happens next</p> <p>So now we have the data \"foo\" stored in a register...</p>"},{"location":"Rust/notes/","title":"Notes","text":""},{"location":"Rust/notes/#usize","title":"usize","text":"<p><code>usize</code> is good for use when indexing <code>usize</code> gives you the guarantee to be always big enough to hold any pointer or any offset in a data structure, while u32 can be too small on some architectures.</p>"},{"location":"Theory/Closure/","title":"Closure","text":""},{"location":"Theory/Closure/#closure","title":"Closure","text":"<p>Objects are data with behaviour</p> <pre><code>public class Foo \n{\n    public int _number;\n\n    Foo(int number)\n    {\n        // object created, number IS the data...\n        _number = number;\n    }\n\n    public int IncBy(int n)\n    {\n        // ... with behaviour\n        _number = _number + n;\n        return _number;\n    }\n}\n</code></pre> <p>Closures are behaviour with data</p> <pre><code>int number = 1;\n\n// this function is \"pure\" behaviour...\nFunc&lt;int, int&gt; IncBy = n =&gt;\n{\n    //... with data\n    number = number + n;\n    return number\n};\n</code></pre> <p>The way the compiler handles a closure above would be ....?</p>"},{"location":"Theory/Conversion/","title":"Conversion","text":"bin hex dec 0000 - 0 0001 - 1 0010 - 2 0011 - 3 0100 - 4 0101 - 5 0110 - 6 0111 - 7 1000 - 8 1001 - 9 1010 A 10 1011 B 11 1100 C 12 1101 D 13 1110 E 14 1111 F 15"},{"location":"Theory/Data%20Structures/","title":"Array Notes","text":""},{"location":"Theory/Data%20Structures/#fixed-arrays","title":"Fixed Arrays","text":"<p>Run times:</p> <ul> <li>Insertion Random: O(n) - It\u2019s easy to insert randomly anywhere in the array. Getting to the location of insertion take O(1) time. However, if you want to preserve order, there is a chance you will have to move O(n) elements to put the number there. Therefore, it's O(n).</li> <li>Insertion Front: O(n) \u2013 Inserting in the front of an array will usually take O(n) time, as you have to shift up to n elements backwards to insert properly.  </li> <li>Insertion Back: O(1) \u2013 Nothing has to be shifted, so you can accomplish this in O(1) time.    </li> <li>Deletion Random: O(n) \u2013 Deleting randomly from the array is just like inserting randomly. You can get to and remove the element in O(1) time. However, if you need to delete an element and not create a hole, then this becomes O(n) as you will need to shift everything to cover the hole.     </li> <li>Deletion Front: O(n) \u2013 Same as Insertion, a shift of up to n elements will be required.  </li> <li>Search Unsorted: O(n) \u2013 If the array is unsorted, there is no way of knowing where the element is going to be. So at worst case, it\u2019s going to be a search of the entire array to find the element.  </li> <li>Search Sorted: O(logn) \u2013 If the array is sorted, we can keep cutting the array in half to find the element we are searching for. This means it will take at most logn operations to find our element. (Reverse exponential).  </li> </ul>"},{"location":"Theory/Data%20Structures/#circular-array","title":"Circular Array","text":"<p>Circular behaviour can be acheived using front and back markers and moving them when inserting data. Becuase you do not know if data will be added to the front or back, Modulo is used to to prevent indexing outside of the array. </p> <pre><code>front: (f - 1) mod arraySize\nback: (b + 1) mod arraySize\n\nexample adding 8 to the front: \n[0,4,3,-,-,-] --&gt; [0,4,3,-,-,8]\n</code></pre> <p>This improves the following run times becuase no data need to be shifted. - Insertion Front: O(1) - Deletion Front: O(1)</p>"},{"location":"Theory/Data%20Structures/#dynamic-arrays","title":"Dynamic Arrays","text":"<p>When the array capacity has been reached but you wish to insert more data if we were to add just 1 more capacity this would result on O(n) operations creating a new array in memory. Instead we can double the capacity which results in O(log(n)).</p> <p>As n -&gt; infinity this can be approximated as constant time O(1). This is true because the rate of occurence of an O(n) operation, i.e. when we resize the array, is ever decreasing. If the occurence was constant like 1 O(n) for every 999 O(1) we could not make this approximation.</p>"},{"location":"Theory/Data%20Structures/#singly-linked-lists","title":"Singly Linked Lists","text":"<p>Works by storing data \"individually\" in nodes. Each node points to the next.</p> <p><pre><code>Head --&gt; &lt;Q:.&gt;  --&gt; &lt;W:.&gt; --&gt; &lt;E:.&gt; --&gt; &lt;R:.&gt; --&gt; Null\n</code></pre> The benefit of this approach is memory efficiency. There is no wasted space. As a caveat the runtimes for inserting/deleting at the fron become constant time and the back becomes n-time. One drawback is that indexing is not possible and neither is binary search regardless of if the list is sorted.</p> <p>-Insert(Rand): O(n) - To insert at a particular location, one has to traverse the list up to that point to insert there. -Insert(Front): O(1) \u2013 We just move the head pointer to the new node and point the new node at the old head. -Insert(Back): O(n) \u2013 We will have to traverse the entire array to get to the back. (We will find a way to improve this a little bit later) -Delete(Random/Back): O(n) \u2013 We must traverse the length of the element we want to delete -Delete(Front): O(1) \u2013 Just as easy as inserting, just have to remove the first element and repoint the head pointer -Search(Sorted): O(n) \u2013 Doesn\u2019t matter if it\u2019s sorted or not. We at worst have to traverse the entirety of the list to find the element. (And if the element isn\u2019t in the list, we have to traverse the entire list to figure that out. ) -Search(Unsorted): O(n) \u2013 Exactly the same as the Sorted.</p>"},{"location":"Theory/Data%20Structures/#doubly-linked-lists-with-tail-pointer","title":"Doubly Linked Lists (with tail pointer)","text":"<p>Singly linked lists can be improved by adding a pointer to the previous node and by introducing a tail pointer.</p> <p>This improves the below runtimes: -Insert(Back): O(n) --&gt; O(1) -Delete(Back): O(n) --&gt; O(1)</p>"},{"location":"Theory/Data%20Structures/#stacks-lifo","title":"Stacks (LIFO)","text":"<p>Stacks are used for a variety of operations in computer science. They can do anything from helping to navigate through a maze, to helping traverse a graph. Stacks work by only allow insert/remove to occur at one end, typically an array or linked list, i.e. they are Last-In-First-Out (LIFO)</p> <pre><code>pop() // removes the top most element\npush() // adds new element to the top of the stack\n</code></pre>"},{"location":"Theory/Data%20Structures/#queues-fifo","title":"Queues (FIFO)","text":"<p>A queue is similar to a stack, but with one large difference, insertions and deletions take part from separate ends. They are good for processing data when order is important like CPU instructions or tree traversals.</p> <pre><code>Enqueue() // add element to the \"back\" of the queue\nDequeue() // take element from the \"front\" of the queue\n// \"front and \"back\" are ambiguous, it depends on how the queue is implemented.\n</code></pre>"},{"location":"Theory/Principles/","title":"Principles","text":"<p>OO organizes programs as objects: data structures consisting of datafields and methods together with their interactions. OO is about bring operations closer to data this pointer is silently passed with a call to an instance level function, so each function has an object on which it operates</p> <p>dynamic dispatch - allows to substitute one concrete implementation to another at runtime without disturbing the caller</p> <p>this is in contrast to  ...</p> <p>procedural and structured programming - specifies the steps a program must take to reach a desired state. functional programming - treats programs as evaluating mathematical functions and avoids state and mutable data.</p>"},{"location":"Theory/Principles/#principles","title":"Principles","text":""},{"location":"Theory/Principles/#solid","title":"S.O.L.I.D.","text":"<ul> <li>Single Responsibility: A class should only have a single responsibility and thus on one reason to change.</li> <li>Open-Closed Principle: Entities should be open for extension but closed for modification.</li> <li>Liskov Substitution: Objects should be replaceable by their subtypes without altering the correctness of the program</li> <li>Interface Segregation Principle: Many smaller, specific interfaces are better than one general purpose one. </li> <li>Dependency Inversion Principle: High-level modules should not depend on low-level modules. Both should depend on abstractions (interfaces), Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</li> </ul>"},{"location":"Theory/Principles/#notes-on-dependency-inversion-principle","title":"Notes on Dependency Inversion Principle","text":"<p>One approach when applying the dependency inversion principle the higher lever code should \"own\" the interface, not the lower level module. This is where the \"inversion\" comes in. This architecture groups the higher/policy components and the abstractions that define lower services together in the same package. Upper layers can then use other implementations of the lower services.</p> <p>Another approach when the lower-level layer components are closed or when the application requires the reuse of existing services, it is common that an Adapter mediates between the services and the abstractions.</p>"},{"location":"Theory/Principles/#encapsulation","title":"Encapsulation","text":"<p>Information Hiding (which is more like implementation hiding). You can expose information but you should hide the implementation details.</p> <p>Invariant: Something that is true for all instances of a class. Precondition: Something that must be true before an operation is invoked (to guarantee that it will work correctly). Users need/should meet such conditions before calling an operation Postcondition: Something that must be true after an operation is invoked. Condition is to be met by the implementor.</p> <p>Protection of Invariance, i.e. invalid states are impossible</p>"},{"location":"Theory/Principles/#cqs-command-query-seperation","title":"CQS (Command Query Seperation)","text":"<p>Method/Function calls can be either a command or a query - not both</p> <pre><code>// you can tell a command becuase it returns void\npublic void Save()\n{\n    // a command mutates state\n    // you can call a query from a command\n}\n\n// a query returns data\npublic string Get()\n{\n    // and should be idempotent\n    // you should not call a command from a query\n}\n</code></pre>"},{"location":"Theory/Principles/#postels-law-robustess-principle","title":"Postels Law (Robustess Principle)","text":"<p>How can you trust a command accepts your input? How can you trust a query to return a useful response</p> <p>Postels law says \"You should be very conservative in what you send, but you should be very liberal in what you accept\" i.e. if you can understand what the client \"meant\" you should accept their input, but if you cannot you should fail fast, for example null checking.</p> <p>Another way to deal with if an operation is legal to invoke is to use Options/Maybe</p> <p>Encapsulation is all about making it easier for client programmers, including your later self, to use the classes you write.</p>"},{"location":"Theory/Principles/#avoid-branching-logic","title":"Avoid Branching Logic","text":"<p>A common mistake is to design interfaces that allow clients to implement features. </p> <p>Better OO design is to create instance that force its implementation to provide features.  </p> <pre><code>void ClaimWarranty(SoldArticle article)\n{\n    DateTime now = new()\n\n    // bad\n    // IsValidOn only helps us complete operation on the calling end which is procedural\n    // operations should be located inside the objects which they concern\n    if (article.Warranty.IsValidOn(now))\n    {\n        Console.WriteLine(\"Money Back\");\n    }\n\n    // good\n    // by writing from the consumer context we come up with the right interface needed, Claim()\n    // claim deals with all warranty related logic and allows caller to provide a callback function. \n    // this is object orientated design\n    article.Warranty.Claim(now, () =&gt; Console.WriteLine(\"Money Back\"));\n}\n</code></pre>"},{"location":"Theory/Principles/#avoid-enums-and-switches","title":"Avoid Enums and Switches","text":"<p>These are details and when business requirements changes they will need to be updated, they are not dynamic. </p> <p>Good OO design is to have an object that defines behaviour. When that behaviour changes instead of updating the code you would use composition to replace that object with a new one. An alternative is to use a dictionary to map a case to an action. This can be substituted dynamically at runtime with a factory method or by other means which is more flexible and OO. i.e. you can update the branching logic without havong to touch the class that relies on it. </p>"},{"location":"Theory/Principles/#use-immutable-classes","title":"Use Immutable Classes","text":""},{"location":"Theory/Sorting%20Algorithm/","title":"Sorting Algorithms","text":""},{"location":"Theory/Sorting%20Algorithm/#runtimes","title":"Runtimes","text":"Sorting Algorithm Best Average Worst Stability Bubble Sort O(n) O(n^2) O(n^2) Stable Selection Sort O(n^2) O(n^2) O(n^2) Insert Sort O(n) O(n^2) O(n^2) Stable Quick Sort O(nlog(n)) O(nlog(n)) O(n^2) Merge Sort O(nlog(n)) O(nlog(n)) O(nlog(n)) Stable"},{"location":"Theory/Sorting%20Algorithm/#bubble-sort","title":"Bubble Sort","text":"<p>Bubble Sort is arguably the simplest sorting algorithm. It works by repeatedly swapping adjacent elements that are in the wrong order, i.e. \"bubbling up\" large values to the end of the array.</p> <p><pre><code>[3 6 2 1] -&gt; [3 2 1 6] -&gt; [2 1 3 6] -&gt; [1 2 3 6]\n</code></pre> - Best Time: \u03a9(n) : This happens if the array is already sorted. It only has to run through the array one time. However, this is a sorting algorithm, so the chance the data is coming in sorted is very slim. - Average Time: \u0398(n^2) : This happens because of the fact that it will most likely have to run through the array n times. Since the array is length n, this means that it will be nXn or n^2 - Worst Time: O(n^2) : This happens because of the fact that it in it's worst case, it will have to run through the n array n amount of times. Since the array is length n, this means that it will be nXn or n^2. The worst case scenario for bubble sort is if the array comes in in reverse sorted order.</p> <pre><code>n = len(arr)\n# go through all array elements\nfor i in range(0, n-1):\n    # go through all array elements left unsorted\n    for j in range(0, n -i -1):\n        # swap if the number is greater than the next\n        if arr[j] &gt; arr[j + 1]:\n            # swap (the larger elements moves to the right)\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n</code></pre>"},{"location":"Theory/Sorting%20Algorithm/#selection-sort","title":"Selection Sort","text":"<p>The selection sort is very similar to that of bubble sort. Instead of finding a max however, It repeatedly finds the minimum element from the unsorted portion, and puts it into a \"sorted portion\" by swapping with whatever element was there before. </p> <p><pre><code>[3 6 2 1] -&gt; [1 6 2 3] -&gt; [1 2 6 3] -&gt; [1 2 3 6] \n</code></pre> - Best Time: \u03a9(n^2) : Even if the array is already sorted, selection sort must run through its entire algorithm to figure this out.  This means it will generate an already sorted portion, and only increase it by 1 on each operation. So the total run time will still come out to be n^2 - Average Time: \u0398(n^2) : Same with the average time. It doesn\u2019t matter how unsorted or sorted the array is, it will run through all operations each time. Although the magnitudes of this and bubble sort are the same, this one is technically faster because it reduces the size of the search area each time, unlike bubble sort which searches the entire array each time. - Worst Time: O(n^2) : Same with the worst-case time. It will use the same operations no matter how sorted or unsorted the array is. No one case is better or worse for selection sort.  </p> <pre><code>n = len(arr)\n# loop through all elements\nfor i in range(0, n-1):\n    indexOfMin = i\n    # find index of minimum element from unsorted\n    for j in range(i+1, n-1):\n        if arr[indexOfMin] &gt; arr[j]:\n            indexOfMin = j\n    # swap (the lower element moves to the left)\n    arr[i], arr[indexOfMin] = arr[indexOfMin], arr[i]\n</code></pre>"},{"location":"Theory/Sorting%20Algorithm/#insertion-sort","title":"Insertion Sort","text":"<p>Insertion sort works similar to that of selection sort, in that it has a sorted and unsorted portion. Instead of finding the minimum in the unsorted portion, it takes the closest number to the unsorted portion and inserts it in to the sorted portion. (Hence the name, insertion sort). To find the right place to insert it we use an \"inverse bubble\" sort approach. </p> <ul> <li>Best Time: \u03a9(n) : If the array comes in sorted, it can do just one pass to figure this out. This makes it\u2019s best case scenario, an already sorted array, run at n time.</li> <li>Average Time: \u0398(n^2) : The average time of this is similar to that of selection sort. On average we have to search the array 1 less time each iteration. So the run time is generally around n(n-1)/2. This means that It will simplify to (n^2-n)/2 which means it will be n^2.</li> <li>Worst Time: O(n^2) : This is when the array is reverse sorted. The array will have to insert and swap backwards for every single number in the array, making it have to make n operations, for the n sized array. In other words n*n which is n^2.  </li> </ul>"},{"location":"Theory/Sorting%20Algorithm/#quick-sort","title":"Quick Sort","text":"<p>Quick Sort works off picking a \u201cpivot\u201d point. All numbers less than the pivot point go to the left, and all numbers greater than the pivot point go to the right. It then reapplies this algorithm to each side of the pivot.</p> <p></p> <p>Each level of this algorithm takes n amount of time. Because of the way we split up the information however, there will only be log(n) levels. This means the general run time of the algorithm is going to be the number of levels multiplied by n, or nlogn.</p> <ul> <li>Best Time: \u03a9(nlogn) : The best case in this scenario is if we pick a perfect pivot point to split the data. It doesn't matter if the array comes in sorted or not. The pivot point is what matters the most. If we pick a pivot point that perfectly splits the data each time, then we will have log(n) levels, and therefore the nlogn run time. </li> <li>Average Time: \u0398(nlogn) : The average time happens when we choose a decent pivot point. As long as we can split up the data and let the program divide and conquer, we get an nlogn time.  </li> <li>Worst Time: O(n^2) : The worst-case scenario happens when we choose a bad pivot point. Instead of dividing the work up to log(n), we keep only splitting out 1 number each time. (The number is larger or smaller than the rest of the array). This makes it so we have roughly n levels. Therefore we end up having the n X n relationship, instead of the n X logn relationship.     </li> </ul>"},{"location":"Theory/Sorting%20Algorithm/#merge-sort","title":"Merge Sort","text":"<p>Merge sort is one of the fastest comparison sorts. It runs at nlogn for all run times, making it reliably fast at splitting up and sorting data. It works by dividing up the data in to smaller and smaller chunks. It then recombines them in to a sorted algorithm. The array breaks down the data until it is in single unit subarrays. It then recombines them using cursors that only have touch each element once for each combination. So each level is going to be at most n amount of \u201ctouches\u201d. Because of the way it breaks up the algorithm, it has logn amount of levels.</p> <p>This means that is will always run at nlogn timing, as there is no way to break it up worse than logn levels.  So it will be n amount of touches per level multiple by logn amount of levels, giving us an even nlogn no matter what array comes in. </p> <ul> <li>Best Time: \u03a9(nlogn) : The same algorithm is applied no matter what type of array comes in. This means it will always be nlogn</li> <li>Average Time: \u0398(nlogn) : The same algorithm is applied no matter what type of array comes in. This means it will always be nlogn</li> <li>Worst Time: O(nlogn) The same algorithm is applied no matter what type of array comes in. This means it will always be nlogn</li> </ul>"},{"location":"Theory/Sorting%20Algorithm/#stability","title":"Stability","text":"<p>For a sorting algorithm to be \"stable\" it must preserver the original order of elements that are considered equal in value. For numeric values this doesnt pose a problem but for instance when sorting a deck or cards which has a value and a suit you may wish to keep the original ordering of all cards with value 6.</p> <ul> <li> <p>Bubble Sort: Stable \u2013 This algorithm is stable because it just swaps the largest value up the structure to the top. If two objects are the same, no swap takes place. This means equal values that were to the left will stay to the left.  (2a 1 2b) -&gt; (1 2a 2b) (The 2a will never swap with the 2b because swaps don\u2019t take place when two values are equal)  </p> </li> <li> <p>Selection Sort: Nonstable \u2013 By default selection sort isn\u2019t stable. This is because it takes a number and swaps it to the left \u201csorted\u201d side. This gives the possibility that a number can be swapped behind another equal number.  (2a 2b 1) -&gt; (1 2b 2a) (The 2a was swapped with the lowest number 1 which was on the right side of 2b. The swap takes place, and the order is not preserved)  </p> </li> <li> <p>Insertion Sort: Stable \u2013 Insertion sort uses a similar swapping mechanism as Bubble sort. It starts from the right while swapping, but never swaps equal values, meaning there is never a chance for elements positions to be flipped.  </p> </li> <li> <p>Quick Sort: Nonstable \u2013 Quick sort uses a splitting mechanism to order to sort. If this \u201cpivot\u201d is a number which has a duplicate, there is a good chance the order will be broken.  (2a 2b 1) -&gt; (1 2b 2a) (In this scenario, 2b was chosen as the pivot, anything less than it went to the left, and anything greater than  or equal went to the right. 2a is equal so it went to the right, breaking the stability of the algorithm)  </p> </li> <li> <p>Merge Sort: Stable \u2013 Merge Sort splits up the data and recombines it in a way that grabs the smallest element and sticks it back in to the array. It however adheres to the order of values, giving preference to values that are in the left subarray to maintain order.  </p> </li> </ul>"},{"location":"Theory/Tree%20Structures/","title":"Tree Structures","text":"<p>Trees can have a variety of structures. They can have a set number of children or have an infinite amount. It all comes down to how you want to use them. </p>"},{"location":"Theory/Tree%20Structures/#binary-search-tree","title":"Binary Search Tree","text":"<p>A special type of tree however is known as the Binary Search Tree (BST).</p> <p>A binary search tree is a tree with these rules: - Each node can only have at most two children - All right children must be greater than - All left children must be less than or equal to. (You can put the equal to on the right or left)  </p> <p>Run Times: - Search: O(log n) \u2013 We only have to touch log elements (the height of the tree) to figure out if the element is in the list or not. - Insert: O(log n) \u2013 Same with inserting in to the tree. We ask the same questions as above, and find the empty place in the tree, and insert there. - Delete O(log n) \u2013 Same as the rest, we can delete by just asking the same questions. </p> <p>Note however in the worst case, if the order elements added was already sorted, the runtimes above become O(n) because the structure would resemble a linked list rather than a tree. </p>"},{"location":"Theory/Tree%20Structures/#heaps","title":"Heaps","text":"<p>Heaps in essence are just stricter trees. They have all the same properties of trees, with the additional \u201cHeap Property\u201d rule added.</p> <p>The heap property is a rule which gives a relationship between the parent and child nodes within a tree. It states that the parent node must always be either greater, or less than its children. If it has to be greater, then it is a max heap, if less, a min heap. This is acheived by checking the parent value at insertion and swapping if necessary.</p> <p>Run Times: - Insert: O(logn) - Delete: O(logn) - GetMin/Max: O(1)</p>"},{"location":"Ubuntu/grub/","title":"Grub Bootloader","text":"<pre><code># config files\nls /etc/default/grub\nls /etc/grub.d\n\n# update changes to /boot/grub/grub.cfg\nsudo update-grub\n\n# see the result and look for menu entires\nsudo less /boot/grub/grub.cfg\n</code></pre> <pre><code>menuentry 'Ubuntu' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gn\nulinux-simple-34e260a8-9589-463b-9f65-8eb479eeef08' {\n        recordfail\n        load_video\n        gfxmode $linux_gfx_mode\n        insmod gzio\n        if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi\n        insmod part_gpt\n        insmod ext2\n        search --no-floppy --fs-uuid --set=root 34e260a8-9589-463b-9f65-8eb479eeef08\n        linux   /boot/vmlinuz-6.11.0-19-generic root=UUID=34e260a8-9589-463b-9f65-8eb479eeef08 ro\nquiet splash resume=/dev/nvme0n1p6 $vt_handoff\n        initrd  /boot/initrd.img-6.11.0-19-generic\n}\n</code></pre> <p>Windows entry is found by the os-probe script in grub.d</p> <pre><code>menuentry 'Windows Boot Manager (on /dev/nvme0n1p2)' --class windows --class os $menuentry_id_optio\nn 'osprober-efi-1AB6-7746' {\n        insmod part_gpt\n        insmod fat\n        search --no-floppy --fs-uuid --set=root 1AB6-7746\n        chainloader /EFI/Microsoft/Boot/bootmgfw.efi\n}\n</code></pre>"},{"location":"Ubuntu/grub/#to-add-a-safemode-option","title":"To Add a Safemode option","text":"<p>You cn add <code>/SAFEBOOT:Minimal</code> or <code>SAFEBOOT:Network</code> to the menuitem found by os-probe</p> <pre><code>sudo nano /etc/grub.d/40_custom\n</code></pre> <pre><code>menuentry 'Windows Boot Manager (Safe Mode on /dev/nvme0n1p2)' --class windows --class os $menuentry_id_option 'osprober-efi-1AB6-7746' {\n    insmod part_gpt\n    insmod fat\n    search --no-floppy --fs-uuid --set=root 1AB6-7746\n    chainloader /EFI/Microsoft/Boot/bootmgfw.efi /SAFEBOOT:Minimal\n}\n</code></pre>"},{"location":"Ubuntu/grub/#grub-command-line","title":"Grub command line","text":"<p>On the grub menu you can press <code>c</code> to get a grub command line</p> <pre><code># list disk and partitions\nls\n\n# look for files\nls (hd0,gpt1)/efi/Microsoft/Boot\n</code></pre>"},{"location":"Ubuntu/suspend-then-hibernate/","title":"Suspend Then Hibernate","text":"<p>useful resource: https://ubuntuhandbook.org/index.php/2021/08/enable-hibernate-ubuntu-21-10/</p> <p>Use a swap partition, I had no success with swapfile</p> <pre><code># find devide id\nswapon --show\nNAME      TYPE      SIZE USED PRIO\n/dev/sda2 partition 9.3G   0B   -2\n\nsudo nano /etc/default/grub\n\n# update line\n# GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash resume=/dev/sda2\"\n\nsudo update-grub\n# reboot\n\nsudo nano /etc/systemd/sleep.conf\n\n# HibernateDelaySec=300\n\n# test it works\nsudo systemctl sleep-then-hibernate\n</code></pre> <p>If that all works correctly you can configure the system</p> <pre><code># to hibernate when idle...\n# (this setting doesnt support suspend-then-hibernate)\n# https://ubuntuhandbook.org/index.php/2021/06/automatic-shutdown-hibernate-on-idle-ubuntu/\ngsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'hibernate'\ngsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 1800\n\n# to hibernate by event\n\n# sudo nano /etc/systemd/logind.conf\n\nHandleLidSwitch=suspend-then-hibernate\nHandleLidSwitchExternalPower=suspend-then-hibernate\n...\nIdleAction=lock\nIdleActionSec=5min\n\n# idle action lock becuase suspend seems to block the hibernate after timeout above...\n</code></pre> <p>To fix wifi adapter missing after hibernate for my Surface 3 Pro</p> <pre><code># find the driver in use for that card\nlspci -nnk | grep -A3 Ethernet\n\n01:00.0 Ethernet controller [0200]: Marvell Technology Group Ltd. 88W8897 [AVASTAR] 802.11ac Wireless [11ab:2b38]\n    Subsystem: SafeNet (wrong ID) 88W8897 [AVASTAR] 802.11ac Wireless [0001:045e]\n    Kernel driver in use: mwifiex_pcie # &lt; this thing\n    Kernel modules: mwifiex_pcie\n\n# script unload and reload when sleeping with systemd and make it executable\nll /lib/systemd/system-sleep/\ntotal 24\ndrwxr-xr-x  2 root root 4096 Jul 22 21:56 ./\ndrwxr-xr-x 19 root root 4096 Apr 24 11:48 ../\n-rwxr-xr-x  1 root root   92 Oct  6  2022 hdparm*\n-rwxr-xr-x  1 root root  227 Jan  9  2024 sysstat.sleep*\n-rwxr-xr-x  1 root root  219 Feb 12 17:50 unattended-upgrades*\n-rwxr-xr-x  1 root root  187 Jul 22 21:56 wifi_sleep*  # &lt; make this file executable\n\ncat /lib/systemd/system-sleep/wifi_sleep \n#!/bin/sh\n\ncase \"$1\" in\n    pre)\n        # Unload\n        modprobe -r mwifiex_pcie\n        #touch /home/scott/suspending\n        ;;\n    post)\n        # Reload\n        modprobe mwifiex_pcie\n        #touch /home/scott/resuming\n        ;;\nesac\n</code></pre>"}]}